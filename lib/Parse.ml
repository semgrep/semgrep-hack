(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_hack"


let parse_source_string ?src_file contents =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "heredoc_start", None;
  "true",
  Some (
    Alt [|
      Token (Literal "true");
      Token (Literal "True");
      Token (Literal "TRUE");
    |];
  );
  "await_modifier", None;
  "pipe_variable", None;
  "float", None;
  "heredoc_body", None;
  "false",
  Some (
    Alt [|
      Token (Literal "false");
      Token (Literal "False");
      Token (Literal "FALSE");
    |];
  );
  "xhp_comment", None;
  "comment", None;
  "tok_lcurldollar_pat_0e8e4b6", None;
  "type_modifier",
  Some (
    Alt [|
      Token (Literal "@");
      Token (Literal "?");
      Token (Literal "~");
    |];
  );
  "async_modifier", None;
  "heredoc_end", None;
  "inout_modifier", None;
  "use_type",
  Some (
    Alt [|
      Token (Literal "namespace");
      Token (Literal "function");
      Token (Literal "type");
      Token (Literal "const");
    |];
  );
  "final_modifier", None;
  "heredoc_start_newline", None;
  "heredoc_end_newline", None;
  "xhp_class_identifier", None;
  "variadic_modifier", None;
  "null",
  Some (
    Alt [|
      Token (Literal "null");
      Token (Literal "Null");
      Token (Literal "NULL");
    |];
  );
  "semgrep_identifier", None;
  "visibility_modifier",
  Some (
    Alt [|
      Token (Literal "public");
      Token (Literal "protected");
      Token (Literal "private");
    |];
  );
  "variable", None;
  "scope_identifier",
  Some (
    Alt [|
      Token (Literal "self");
      Token (Literal "parent");
      Token (Literal "static");
    |];
  );
  "xhp_string", None;
  "xhp_identifier", None;
  "integer", None;
  "pat_466b599", None;
  "xhp_category_identifier", None;
  "tok_pdyn_p1_as", None;
  "xhp_modifier", None;
  "string", None;
  "backslash", None;
  "ellipsis", None;
  "abstract_modifier", None;
  "tok_pdyn_n1_as", None;
  "semgrep_variadic_identifier", None;
  "pat_b6fe07e", None;
  "static_modifier", None;
  "identifier", None;
  "single_parameter", Some (Token (Name "variable"););
  "anonymous_function_use_clause",
  Some (
    Seq [
      Token (Literal "use");
      Token (Literal "(");
      Token (Name "variable");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "variable");
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "xhp_close",
  Some (
    Seq [
      Token (Literal "</");
      Alt [|
        Token (Name "xhp_identifier");
        Token (Name "xhp_class_identifier");
      |];
      Token (Literal ">");
    ];
  );
  "xhp_binary_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "xhp_identifier");
        Token (Name "xhp_class_identifier");
        Token (Name "xhp_category_identifier");
        Token (Name "xhp_binary_expression");
        Token (Name "xhp_postfix_unary_expression");
        Token (Name "xhp_parenthesized_expression");
      |];
      Token (Literal "|");
      Alt [|
        Token (Name "xhp_identifier");
        Token (Name "xhp_class_identifier");
        Token (Name "xhp_category_identifier");
        Token (Name "xhp_binary_expression");
        Token (Name "xhp_postfix_unary_expression");
        Token (Name "xhp_parenthesized_expression");
      |];
    ];
  );
  "xhp_parenthesized_expression",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "xhp_identifier");
        Token (Name "xhp_class_identifier");
        Token (Name "xhp_category_identifier");
        Token (Name "xhp_binary_expression");
        Token (Name "xhp_postfix_unary_expression");
        Token (Name "xhp_parenthesized_expression");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "xhp_identifier");
            Token (Name "xhp_class_identifier");
            Token (Name "xhp_category_identifier");
            Token (Name "xhp_binary_expression");
            Token (Name "xhp_postfix_unary_expression");
            Token (Name "xhp_parenthesized_expression");
          |];
        ];
      );
      Token (Literal ")");
    ];
  );
  "xhp_postfix_unary_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "xhp_identifier");
        Token (Name "xhp_class_identifier");
        Token (Name "xhp_category_identifier");
        Token (Name "xhp_binary_expression");
        Token (Name "xhp_postfix_unary_expression");
        Token (Name "xhp_parenthesized_expression");
      |];
      Alt [|
        Token (Literal "+");
        Token (Literal "*");
        Token (Literal "?");
      |];
    ];
  );
  "xhp_category_declaration",
  Some (
    Seq [
      Token (Literal "category");
      Token (Name "xhp_category_identifier");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "xhp_category_identifier");
        ];
      );
      Token (Literal ";");
    ];
  );
  "xhp_enum_type",
  Some (
    Seq [
      Token (Literal "enum");
      Token (Literal "{");
      Alt [|
        Token (Name "string");
        Token (Name "integer");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "string");
            Token (Name "integer");
          |];
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "empty_statement",
  Some (
    Alt [|
      Token (Literal ";");
      Token (Name "ellipsis");
    |];
  );
  "member_modifier",
  Some (
    Alt [|
      Token (Name "visibility_modifier");
      Token (Name "static_modifier");
      Token (Name "abstract_modifier");
      Token (Name "final_modifier");
    |];
  );
  "prefixed_string",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Name "string");
    ];
  );
  "trait_alias_clause",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal "as");
      Alt [|
        Seq [
          Token (Name "visibility_modifier");
          Opt (
            Token (Name "identifier");
          );
        ];
        Seq [
          Opt (
            Token (Name "visibility_modifier");
          );
          Token (Name "identifier");
        ];
      |];
    ];
  );
  "qualified_identifier",
  Some (
    Alt [|
      Alt [|
        Seq [
          Opt (
            Token (Name "identifier");
          );
          Repeat1 (
            Seq [
              Token (Name "backslash");
              Token (Name "identifier");
            ];
          );
        ];
        Token (Name "identifier");
      |];
      Token (Name "semgrep_identifier");
    |];
  );
  "semgrep_extended_identifier",
  Some (
    Alt [|
      Token (Name "semgrep_identifier");
      Token (Name "identifier");
    |];
  );
  "single_parameter_parameters",
  Some (
    Token (Name "single_parameter");
  );
  "xhp_children_declaration",
  Some (
    Seq [
      Token (Literal "children");
      Alt [|
        Token (Name "xhp_identifier");
        Token (Name "xhp_class_identifier");
        Token (Name "xhp_category_identifier");
        Token (Name "xhp_binary_expression");
        Token (Name "xhp_postfix_unary_expression");
        Token (Name "xhp_parenthesized_expression");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "xhp_identifier");
            Token (Name "xhp_class_identifier");
            Token (Name "xhp_category_identifier");
            Token (Name "xhp_binary_expression");
            Token (Name "xhp_postfix_unary_expression");
            Token (Name "xhp_parenthesized_expression");
          |];
        ];
      );
      Token (Literal ";");
    ];
  );
  "trait_select_clause",
  Some (
    Seq [
      Token (Name "qualified_identifier");
      Token (Literal "::");
      Token (Name "identifier");
      Token (Literal "insteadof");
      Token (Name "qualified_identifier");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "qualified_identifier");
        ];
      );
    ];
  );
  "namespace_identifier",
  Some (
    Alt [|
      Seq [
        Token (Name "qualified_identifier");
        Opt (
          Token (Name "backslash");
        );
      ];
      Token (Name "backslash");
    |];
  );
  "type_constant_",
  Some (
    Seq [
      Alt [|
        Token (Name "qualified_identifier");
        Token (Name "type_constant_");
      |];
      Token (Literal "::");
      Token (Name "identifier");
    ];
  );
  "scoped_identifier",
  Some (
    Seq [
      Alt [|
        Token (Name "qualified_identifier");
        Token (Name "variable");
        Token (Name "scope_identifier");
        Alt [|
          Token (Name "xhp_identifier");
          Token (Name "xhp_class_identifier");
        |];
        Token (Name "pipe_variable");
      |];
      Token (Literal "::");
      Alt [|
        Token (Name "identifier");
        Token (Name "variable");
      |];
    ];
  );
  "use_clause",
  Some (
    Seq [
      Opt (
        Token (Name "use_type");
      );
      Token (Name "namespace_identifier");
      Opt (
        Seq [
          Token (Literal "as");
          Token (Name "identifier");
        ];
      );
    ];
  );
  "type_constant",
  Some (
    Seq [
      Repeat (
        Token (Name "type_modifier");
      );
      Token (Name "type_constant_");
    ];
  );
  "use_statement",
  Some (
    Seq [
      Token (Literal "use");
      Alt [|
        Seq [
          Token (Name "use_clause");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "use_clause");
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
        Seq [
          Opt (
            Token (Name "use_type");
          );
          Token (Name "namespace_identifier");
          Token (Literal "{");
          Token (Name "use_clause");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "use_clause");
            ];
          );
          Opt (
            Token (Literal ",");
          );
          Token (Literal "}");
        ];
      |];
      Token (Literal ";");
    ];
  );
  "alias_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_modifier");
      );
      Alt [|
        Token (Literal "type");
        Token (Literal "newtype");
      |];
      Token (Name "semgrep_extended_identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Seq [
          Token (Literal "as");
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
        ];
      );
      Token (Literal "=");
      Alt [|
        Token (Name "type_specifier");
        Token (Name "type_constant");
        Token (Name "shape_type_specifier");
        Token (Name "function_type_specifier");
        Token (Name "tuple_type_specifier");
      |];
      Token (Literal ";");
    ];
  );
  "anonymous_function_expression",
  Some (
    Seq [
      Opt (
        Token (Name "async_modifier");
      );
      Token (Literal "function");
      Token (Name "parameters");
      Opt (
        Seq [
          Token (Literal ":");
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
        ];
      );
      Opt (
        Token (Name "anonymous_function_use_clause");
      );
      Token (Name "compound_statement");
    ];
  );
  "argument",
  Some (
    Alt [|
      Seq [
        Opt (
          Alt [|
            Token (Name "inout_modifier");
            Token (Name "variadic_modifier");
          |];
        );
        Token (Name "expression");
      ];
      Token (Name "semgrep_variadic_identifier");
    |];
  );
  "arguments",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "argument");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "argument");
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "array",
  Some (
    Seq [
      Alt [|
        Token (Literal "array");
        Token (Literal "varray");
        Token (Literal "darray");
        Token (Literal "vec");
        Token (Literal "dict");
        Token (Literal "keyset");
      |];
      Opt (
        Token (Name "type_arguments");
      );
      Token (Literal "[");
      Opt (
        Seq [
          Alt [|
            Token (Name "expression");
            Token (Name "element_initializer");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "expression");
                Token (Name "element_initializer");
              |];
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal "]");
    ];
  );
  "as_expression",
  Some (
    Seq [
      Token (Name "expression");
      Alt [|
        Token (Name "tok_pdyn_n1_as");
        Token (Literal "?as");
      |];
      Alt [|
        Token (Name "type_specifier");
        Token (Name "type_constant");
        Token (Name "shape_type_specifier");
        Token (Name "function_type_specifier");
        Token (Name "tuple_type_specifier");
      |];
    ];
  );
  "attribute_modifier",
  Some (
    Seq [
      Token (Literal "<<");
      Token (Name "qualified_identifier");
      Opt (
        Token (Name "arguments");
      );
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "qualified_identifier");
          Opt (
            Token (Name "arguments");
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ">>");
    ];
  );
  "awaitable_expression",
  Some (
    Seq [
      Token (Literal "async");
      Token (Name "compound_statement");
    ];
  );
  "binary_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Token (Literal "|>");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "??");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "||");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "|");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "^");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "==");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "!=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "===");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "!==");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<=>");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">>");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "+");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "-");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ".");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "*");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "/");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "%");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "**");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "?:");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "??=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ".=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "|=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "^=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<<=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">>=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "+=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "-=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "*=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "/=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "%=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "**=");
        Token (Name "expression");
      ];
    |];
  );
  "braced_expression",
  Some (
    Seq [
      Token (Literal "{");
      Token (Name "expression");
      Token (Literal "}");
    ];
  );
  "break_statement",
  Some (
    Seq [
      Token (Literal "break");
      Opt (
        Token (Name "expression");
      );
      Token (Literal ";");
    ];
  );
  "call_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "expression");
        Alt [|
          Token (Literal "array");
          Token (Literal "varray");
          Token (Literal "darray");
          Token (Literal "vec");
          Token (Literal "dict");
          Token (Literal "keyset");
        |];
      |];
      Opt (
        Token (Name "type_arguments");
      );
      Token (Name "arguments");
    ];
  );
  "cast_expression",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Literal "array");
        Token (Literal "int");
        Token (Literal "float");
        Token (Literal "string");
        Token (Literal "bool");
      |];
      Token (Literal ")");
      Token (Name "expression");
    ];
  );
  "catch_clause",
  Some (
    Seq [
      Token (Literal "catch");
      Token (Literal "(");
      Alt [|
        Token (Name "type_specifier");
        Token (Name "type_constant");
        Token (Name "shape_type_specifier");
        Token (Name "function_type_specifier");
        Token (Name "tuple_type_specifier");
      |];
      Token (Name "variable");
      Token (Literal ")");
      Token (Name "compound_statement");
    ];
  );
  "class_const_declaration",
  Some (
    Seq [
      Repeat (
        Token (Name "member_modifier");
      );
      Token (Literal "const");
      Opt (
        Alt [|
          Token (Name "type_specifier");
          Token (Name "type_constant");
          Token (Name "shape_type_specifier");
          Token (Name "function_type_specifier");
          Token (Name "tuple_type_specifier");
        |];
      );
      Token (Name "class_const_declarator");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "class_const_declarator");
        ];
      );
      Token (Literal ";");
    ];
  );
  "class_const_declarator",
  Some (
    Seq [
      Alt [|
        Token (Name "semgrep_extended_identifier");
        Alt [|
          Token (Literal "type");
          Token (Literal "newtype");
          Token (Literal "shape");
          Token (Literal "tupe");
          Token (Literal "clone");
          Token (Literal "new");
          Token (Literal "print");
          Alt [|
            Token (Literal "bool");
            Token (Literal "float");
            Token (Literal "int");
            Token (Literal "string");
            Token (Literal "arraykey");
            Token (Literal "void");
            Token (Literal "nonnull");
            Token (Name "null");
            Token (Literal "mixed");
            Token (Literal "dynamic");
            Token (Literal "noreturn");
          |];
          Alt [|
            Token (Literal "array");
            Token (Literal "varray");
            Token (Literal "darray");
            Token (Literal "vec");
            Token (Literal "dict");
            Token (Literal "keyset");
          |];
        |];
      |];
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
      );
    ];
  );
  "class_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_modifier");
      );
      Opt (
        Alt [|
          Token (Name "abstract_modifier");
          Token (Name "final_modifier");
        |];
      );
      Opt (
        Alt [|
          Token (Name "abstract_modifier");
          Token (Name "final_modifier");
        |];
      );
      Opt (
        Token (Name "xhp_modifier");
      );
      Token (Literal "class");
      Alt [|
        Token (Name "semgrep_extended_identifier");
        Alt [|
          Token (Name "xhp_identifier");
          Token (Name "xhp_class_identifier");
        |];
      |];
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Token (Name "extends_clause");
      );
      Opt (
        Token (Name "implements_clause");
      );
      Opt (
        Token (Name "where_clause");
      );
      Token (Name "member_declarations");
    ];
  );
  "collection",
  Some (
    Seq [
      Token (Name "qualified_identifier");
      Token (Literal "{");
      Opt (
        Seq [
          Alt [|
            Token (Name "expression");
            Token (Name "element_initializer");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "expression");
                Token (Name "element_initializer");
              |];
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "compound_statement",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Alt [|
            Token (Name "function_declaration");
            Token (Name "class_declaration");
            Token (Name "interface_declaration");
            Token (Name "trait_declaration");
            Token (Name "alias_declaration");
            Token (Name "enum_declaration");
            Token (Name "namespace_declaration");
            Token (Name "const_declaration");
          |];
          Token (Name "compound_statement");
          Token (Name "empty_statement");
          Token (Name "expression_statement");
          Token (Name "return_statement");
          Token (Name "break_statement");
          Token (Name "continue_statement");
          Token (Name "throw_statement");
          Token (Name "echo_statement");
          Token (Name "unset_statement");
          Token (Name "use_statement");
          Token (Name "if_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "for_statement");
          Token (Name "switch_statement");
          Token (Name "foreach_statement");
          Token (Name "try_statement");
          Token (Name "concurrent_statement");
          Token (Name "using_statement");
        |];
      );
      Token (Literal "}");
    ];
  );
  "concurrent_statement",
  Some (
    Seq [
      Token (Literal "concurrent");
      Token (Name "compound_statement");
    ];
  );
  "const_declaration",
  Some (
    Seq [
      Token (Literal "const");
      Opt (
        Alt [|
          Token (Name "type_specifier");
          Token (Name "type_constant");
          Token (Name "shape_type_specifier");
          Token (Name "function_type_specifier");
          Token (Name "tuple_type_specifier");
        |];
      );
      Token (Name "const_declarator");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "const_declarator");
        ];
      );
      Token (Literal ";");
    ];
  );
  "const_declarator",
  Some (
    Seq [
      Alt [|
        Token (Name "semgrep_extended_identifier");
        Alt [|
          Token (Literal "type");
          Token (Literal "newtype");
          Token (Literal "shape");
          Token (Literal "tupe");
          Token (Literal "clone");
          Token (Literal "new");
          Token (Literal "print");
          Alt [|
            Token (Literal "bool");
            Token (Literal "float");
            Token (Literal "int");
            Token (Literal "string");
            Token (Literal "arraykey");
            Token (Literal "void");
            Token (Literal "nonnull");
            Token (Name "null");
            Token (Literal "mixed");
            Token (Literal "dynamic");
            Token (Literal "noreturn");
          |];
          Alt [|
            Token (Literal "array");
            Token (Literal "varray");
            Token (Literal "darray");
            Token (Literal "vec");
            Token (Literal "dict");
            Token (Literal "keyset");
          |];
        |];
      |];
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "continue_statement",
  Some (
    Seq [
      Token (Literal "continue");
      Opt (
        Token (Name "expression");
      );
      Token (Literal ";");
    ];
  );
  "deep_ellipsis",
  Some (
    Seq [
      Token (Literal "<...");
      Token (Name "expression");
      Token (Literal "...>");
    ];
  );
  "do_statement",
  Some (
    Seq [
      Token (Literal "do");
      Alt [|
        Alt [|
          Token (Name "function_declaration");
          Token (Name "class_declaration");
          Token (Name "interface_declaration");
          Token (Name "trait_declaration");
          Token (Name "alias_declaration");
          Token (Name "enum_declaration");
          Token (Name "namespace_declaration");
          Token (Name "const_declaration");
        |];
        Token (Name "compound_statement");
        Token (Name "empty_statement");
        Token (Name "expression_statement");
        Token (Name "return_statement");
        Token (Name "break_statement");
        Token (Name "continue_statement");
        Token (Name "throw_statement");
        Token (Name "echo_statement");
        Token (Name "unset_statement");
        Token (Name "use_statement");
        Token (Name "if_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "for_statement");
        Token (Name "switch_statement");
        Token (Name "foreach_statement");
        Token (Name "try_statement");
        Token (Name "concurrent_statement");
        Token (Name "using_statement");
      |];
      Token (Literal "while");
      Token (Name "parenthesized_expression");
      Token (Literal ";");
    ];
  );
  "echo_statement",
  Some (
    Seq [
      Token (Literal "echo");
      Token (Name "expression");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "expression");
        ];
      );
      Token (Literal ";");
    ];
  );
  "element_initializer",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "=>");
      Token (Name "expression");
    ];
  );
  "embedded_brace_call_expression",
  Some (
    Seq [
      Token (Name "embedded_brace_expression_");
      Token (Name "arguments");
    ];
  );
  "embedded_brace_expression",
  Some (
    Seq [
      Token (Name "embedded_brace_expression_");
      Token (Literal "}");
    ];
  );
  "embedded_brace_expression_",
  Some (
    Alt [|
      Token (Name "tok_lcurldollar_pat_0e8e4b6");
      Token (Name "embedded_brace_call_expression");
      Token (Name "embedded_brace_subscript_expression");
      Token (Name "embedded_brace_selection_expression");
    |];
  );
  "embedded_brace_selection_expression",
  Some (
    Seq [
      Token (Name "embedded_brace_expression_");
      Alt [|
        Token (Literal "?->");
        Token (Literal "->");
      |];
      Alt [|
        Token (Name "variable");
        Token (Name "pipe_variable");
        Token (Name "list_expression");
        Token (Name "subscript_expression");
        Token (Name "qualified_identifier");
        Token (Name "parenthesized_expression");
        Token (Name "call_expression");
        Token (Name "scoped_identifier");
        Token (Name "scope_identifier");
        Token (Name "selection_expression");
        Alt [|
          Token (Name "xhp_identifier");
          Token (Name "xhp_class_identifier");
        |];
      |];
    ];
  );
  "embedded_brace_subscript_expression",
  Some (
    Seq [
      Token (Name "embedded_brace_expression_");
      Token (Literal "[");
      Opt (
        Token (Name "expression");
      );
      Token (Literal "]");
    ];
  );
  "enum_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_modifier");
      );
      Token (Literal "enum");
      Token (Name "semgrep_extended_identifier");
      Token (Literal ":");
      Alt [|
        Token (Name "type_specifier");
        Token (Name "type_constant");
        Token (Name "shape_type_specifier");
        Token (Name "function_type_specifier");
        Token (Name "tuple_type_specifier");
      |];
      Opt (
        Seq [
          Token (Literal "as");
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
        ];
      );
      Token (Literal "{");
      Repeat (
        Token (Name "enumerator");
      );
      Token (Literal "}");
    ];
  );
  "enumerator",
  Some (
    Seq [
      Token (Name "semgrep_extended_identifier");
      Token (Literal "=");
      Token (Name "expression");
      Token (Literal ";");
    ];
  );
  "expression",
  Some (
    Alt [|
      Alt [|
        Token (Name "heredoc");
        Token (Name "array");
        Token (Name "tuple");
        Token (Name "shape");
        Token (Name "collection");
        Alt [|
          Token (Name "string");
          Token (Name "integer");
          Token (Name "float");
          Token (Name "true");
          Token (Name "false");
          Token (Name "null");
        |];
        Alt [|
          Token (Name "variable");
          Token (Name "pipe_variable");
          Token (Name "list_expression");
          Token (Name "subscript_expression");
          Token (Name "qualified_identifier");
          Token (Name "parenthesized_expression");
          Token (Name "call_expression");
          Token (Name "scoped_identifier");
          Token (Name "scope_identifier");
          Token (Name "selection_expression");
          Alt [|
            Token (Name "xhp_identifier");
            Token (Name "xhp_class_identifier");
          |];
        |];
        Token (Name "prefixed_string");
        Token (Name "parenthesized_expression");
        Token (Name "binary_expression");
        Token (Name "prefix_unary_expression");
        Token (Name "postfix_unary_expression");
        Token (Name "is_expression");
        Token (Name "as_expression");
        Token (Name "awaitable_expression");
        Token (Name "yield_expression");
        Token (Name "cast_expression");
        Token (Name "ternary_expression");
        Token (Name "lambda_expression");
        Token (Name "call_expression");
        Token (Name "selection_expression");
        Token (Name "new_expression");
        Token (Name "include_expression");
        Token (Name "require_expression");
        Token (Name "anonymous_function_expression");
        Token (Name "xhp_expression");
      |];
      Token (Name "ellipsis");
      Token (Name "deep_ellipsis");
    |];
  );
  "expression_statement",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ";");
    ];
  );
  "extends_clause",
  Some (
    Seq [
      Token (Literal "extends");
      Alt [|
        Token (Name "type_specifier");
        Token (Name "type_constant");
        Token (Name "shape_type_specifier");
        Token (Name "function_type_specifier");
        Token (Name "tuple_type_specifier");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
        ];
      );
    ];
  );
  "field_initializer",
  Some (
    Seq [
      Alt [|
        Token (Name "string");
        Token (Name "scoped_identifier");
      |];
      Token (Literal "=>");
      Token (Name "expression");
    ];
  );
  "field_specifier",
  Some (
    Seq [
      Opt (
        Token (Literal "?");
      );
      Token (Name "expression");
      Token (Literal "=>");
      Alt [|
        Token (Name "type_specifier");
        Token (Name "type_constant");
        Token (Name "shape_type_specifier");
        Token (Name "function_type_specifier");
        Token (Name "tuple_type_specifier");
      |];
    ];
  );
  "finally_clause",
  Some (
    Seq [
      Token (Literal "finally");
      Token (Name "compound_statement");
    ];
  );
  "for_statement",
  Some (
    Seq [
      Token (Literal "for");
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "expression");
            ];
          );
        ];
      );
      Token (Literal ";");
      Opt (
        Seq [
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "expression");
            ];
          );
        ];
      );
      Token (Literal ";");
      Opt (
        Seq [
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "expression");
            ];
          );
        ];
      );
      Token (Literal ")");
      Alt [|
        Alt [|
          Token (Name "function_declaration");
          Token (Name "class_declaration");
          Token (Name "interface_declaration");
          Token (Name "trait_declaration");
          Token (Name "alias_declaration");
          Token (Name "enum_declaration");
          Token (Name "namespace_declaration");
          Token (Name "const_declaration");
        |];
        Token (Name "compound_statement");
        Token (Name "empty_statement");
        Token (Name "expression_statement");
        Token (Name "return_statement");
        Token (Name "break_statement");
        Token (Name "continue_statement");
        Token (Name "throw_statement");
        Token (Name "echo_statement");
        Token (Name "unset_statement");
        Token (Name "use_statement");
        Token (Name "if_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "for_statement");
        Token (Name "switch_statement");
        Token (Name "foreach_statement");
        Token (Name "try_statement");
        Token (Name "concurrent_statement");
        Token (Name "using_statement");
      |];
    ];
  );
  "foreach_statement",
  Some (
    Seq [
      Token (Literal "foreach");
      Token (Literal "(");
      Token (Name "expression");
      Opt (
        Token (Name "await_modifier");
      );
      Token (Name "tok_pdyn_p1_as");
      Opt (
        Seq [
          Alt [|
            Token (Name "variable");
            Token (Name "pipe_variable");
            Token (Name "list_expression");
            Token (Name "subscript_expression");
            Token (Name "qualified_identifier");
            Token (Name "parenthesized_expression");
            Token (Name "call_expression");
            Token (Name "scoped_identifier");
            Token (Name "scope_identifier");
            Token (Name "selection_expression");
            Alt [|
              Token (Name "xhp_identifier");
              Token (Name "xhp_class_identifier");
            |];
          |];
          Token (Literal "=>");
        ];
      );
      Alt [|
        Token (Name "variable");
        Token (Name "pipe_variable");
        Token (Name "list_expression");
        Token (Name "subscript_expression");
        Token (Name "qualified_identifier");
        Token (Name "parenthesized_expression");
        Token (Name "call_expression");
        Token (Name "scoped_identifier");
        Token (Name "scope_identifier");
        Token (Name "selection_expression");
        Alt [|
          Token (Name "xhp_identifier");
          Token (Name "xhp_class_identifier");
        |];
      |];
      Token (Literal ")");
      Alt [|
        Alt [|
          Token (Name "function_declaration");
          Token (Name "class_declaration");
          Token (Name "interface_declaration");
          Token (Name "trait_declaration");
          Token (Name "alias_declaration");
          Token (Name "enum_declaration");
          Token (Name "namespace_declaration");
          Token (Name "const_declaration");
        |];
        Token (Name "compound_statement");
        Token (Name "empty_statement");
        Token (Name "expression_statement");
        Token (Name "return_statement");
        Token (Name "break_statement");
        Token (Name "continue_statement");
        Token (Name "throw_statement");
        Token (Name "echo_statement");
        Token (Name "unset_statement");
        Token (Name "use_statement");
        Token (Name "if_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "for_statement");
        Token (Name "switch_statement");
        Token (Name "foreach_statement");
        Token (Name "try_statement");
        Token (Name "concurrent_statement");
        Token (Name "using_statement");
      |];
    ];
  );
  "function_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_modifier");
      );
      Token (Name "function_declaration_header");
      Alt [|
        Token (Name "compound_statement");
        Token (Literal ";");
      |];
    ];
  );
  "function_declaration_header",
  Some (
    Seq [
      Opt (
        Token (Name "async_modifier");
      );
      Token (Literal "function");
      Token (Name "semgrep_extended_identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Token (Name "parameters");
      Opt (
        Seq [
          Token (Literal ":");
          Opt (
            Token (Name "attribute_modifier");
          );
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
        ];
      );
      Opt (
        Token (Name "where_clause");
      );
    ];
  );
  "function_type_specifier",
  Some (
    Seq [
      Repeat (
        Token (Name "type_modifier");
      );
      Token (Literal "(");
      Token (Name "pat_466b599");
      Opt (
        Seq [
          Opt (
            Token (Name "inout_modifier");
          );
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
          Opt (
            Token (Name "variadic_modifier");
          );
          Repeat (
            Seq [
              Token (Literal ",");
              Opt (
                Token (Name "inout_modifier");
              );
              Alt [|
                Token (Name "type_specifier");
                Token (Name "type_constant");
                Token (Name "shape_type_specifier");
                Token (Name "function_type_specifier");
                Token (Name "tuple_type_specifier");
              |];
              Opt (
                Token (Name "variadic_modifier");
              );
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ")");
      Token (Literal ":");
      Alt [|
        Token (Name "type_specifier");
        Token (Name "type_constant");
        Token (Name "shape_type_specifier");
        Token (Name "function_type_specifier");
        Token (Name "tuple_type_specifier");
      |];
      Token (Literal ")");
    ];
  );
  "heredoc",
  Some (
    Seq [
      Token (Literal "<<<");
      Token (Name "heredoc_start");
      Opt (
        Token (Name "heredoc_start_newline");
      );
      Repeat (
        Alt [|
          Token (Name "heredoc_body");
          Token (Name "variable");
          Token (Name "embedded_brace_expression");
        |];
      );
      Opt (
        Token (Name "heredoc_end_newline");
      );
      Token (Name "heredoc_end");
    ];
  );
  "if_statement",
  Some (
    Seq [
      Token (Literal "if");
      Token (Name "parenthesized_expression");
      Alt [|
        Alt [|
          Token (Name "function_declaration");
          Token (Name "class_declaration");
          Token (Name "interface_declaration");
          Token (Name "trait_declaration");
          Token (Name "alias_declaration");
          Token (Name "enum_declaration");
          Token (Name "namespace_declaration");
          Token (Name "const_declaration");
        |];
        Token (Name "compound_statement");
        Token (Name "empty_statement");
        Token (Name "expression_statement");
        Token (Name "return_statement");
        Token (Name "break_statement");
        Token (Name "continue_statement");
        Token (Name "throw_statement");
        Token (Name "echo_statement");
        Token (Name "unset_statement");
        Token (Name "use_statement");
        Token (Name "if_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "for_statement");
        Token (Name "switch_statement");
        Token (Name "foreach_statement");
        Token (Name "try_statement");
        Token (Name "concurrent_statement");
        Token (Name "using_statement");
      |];
      Repeat (
        Seq [
          Alt [|
            Token (Literal "elseif");
            Seq [
              Token (Literal "else");
              Token (Literal "if");
            ];
          |];
          Token (Name "parenthesized_expression");
          Alt [|
            Alt [|
              Token (Name "function_declaration");
              Token (Name "class_declaration");
              Token (Name "interface_declaration");
              Token (Name "trait_declaration");
              Token (Name "alias_declaration");
              Token (Name "enum_declaration");
              Token (Name "namespace_declaration");
              Token (Name "const_declaration");
            |];
            Token (Name "compound_statement");
            Token (Name "empty_statement");
            Token (Name "expression_statement");
            Token (Name "return_statement");
            Token (Name "break_statement");
            Token (Name "continue_statement");
            Token (Name "throw_statement");
            Token (Name "echo_statement");
            Token (Name "unset_statement");
            Token (Name "use_statement");
            Token (Name "if_statement");
            Token (Name "while_statement");
            Token (Name "do_statement");
            Token (Name "for_statement");
            Token (Name "switch_statement");
            Token (Name "foreach_statement");
            Token (Name "try_statement");
            Token (Name "concurrent_statement");
            Token (Name "using_statement");
          |];
        ];
      );
      Opt (
        Seq [
          Token (Literal "else");
          Alt [|
            Alt [|
              Token (Name "function_declaration");
              Token (Name "class_declaration");
              Token (Name "interface_declaration");
              Token (Name "trait_declaration");
              Token (Name "alias_declaration");
              Token (Name "enum_declaration");
              Token (Name "namespace_declaration");
              Token (Name "const_declaration");
            |];
            Token (Name "compound_statement");
            Token (Name "empty_statement");
            Token (Name "expression_statement");
            Token (Name "return_statement");
            Token (Name "break_statement");
            Token (Name "continue_statement");
            Token (Name "throw_statement");
            Token (Name "echo_statement");
            Token (Name "unset_statement");
            Token (Name "use_statement");
            Token (Name "if_statement");
            Token (Name "while_statement");
            Token (Name "do_statement");
            Token (Name "for_statement");
            Token (Name "switch_statement");
            Token (Name "foreach_statement");
            Token (Name "try_statement");
            Token (Name "concurrent_statement");
            Token (Name "using_statement");
          |];
        ];
      );
    ];
  );
  "implements_clause",
  Some (
    Seq [
      Token (Literal "implements");
      Alt [|
        Token (Name "type_specifier");
        Token (Name "type_constant");
        Token (Name "shape_type_specifier");
        Token (Name "function_type_specifier");
        Token (Name "tuple_type_specifier");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
        ];
      );
    ];
  );
  "include_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "include");
        Token (Literal "include_once");
      |];
      Token (Name "expression");
    ];
  );
  "interface_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_modifier");
      );
      Token (Literal "interface");
      Token (Name "semgrep_extended_identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Token (Name "extends_clause");
      );
      Opt (
        Token (Name "where_clause");
      );
      Token (Name "member_declarations");
    ];
  );
  "is_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "is");
      Alt [|
        Token (Name "type_specifier");
        Token (Name "type_constant");
        Token (Name "shape_type_specifier");
        Token (Name "function_type_specifier");
        Token (Name "tuple_type_specifier");
      |];
    ];
  );
  "lambda_expression",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_modifier");
      );
      Opt (
        Token (Name "async_modifier");
      );
      Alt [|
        Token (Name "single_parameter_parameters");
        Seq [
          Token (Name "parameters");
          Opt (
            Seq [
              Token (Literal ":");
              Alt [|
                Token (Name "type_specifier");
                Token (Name "type_constant");
                Token (Name "shape_type_specifier");
                Token (Name "function_type_specifier");
                Token (Name "tuple_type_specifier");
              |];
            ];
          );
        ];
      |];
      Token (Literal "==>");
      Alt [|
        Token (Name "expression");
        Token (Name "compound_statement");
      |];
    ];
  );
  "list_expression",
  Some (
    Seq [
      Token (Literal "list");
      Token (Literal "(");
      Opt (
        Token (Name "expression");
      );
      Repeat (
        Seq [
          Token (Literal ",");
          Opt (
            Token (Name "expression");
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "member_declarations",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "class_const_declaration");
          Token (Name "method_declaration");
          Token (Name "property_declaration");
          Token (Name "type_const_declaration");
          Token (Name "trait_use_clause");
          Token (Name "require_implements_clause");
          Token (Name "require_extends_clause");
          Token (Name "xhp_attribute_declaration");
          Token (Name "xhp_children_declaration");
          Token (Name "xhp_category_declaration");
          Token (Name "ellipsis");
        |];
      );
      Token (Literal "}");
    ];
  );
  "method_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_modifier");
      );
      Repeat (
        Token (Name "member_modifier");
      );
      Token (Name "function_declaration_header");
      Alt [|
        Token (Name "compound_statement");
        Token (Literal ";");
      |];
    ];
  );
  "namespace_declaration",
  Some (
    Seq [
      Token (Literal "namespace");
      Opt (
        Alt [|
          Seq [
            Token (Name "qualified_identifier");
            Token (Literal ";");
          ];
          Seq [
            Opt (
              Token (Name "qualified_identifier");
            );
            Token (Name "compound_statement");
          ];
        |];
      );
    ];
  );
  "new_expression",
  Some (
    Seq [
      Token (Literal "new");
      Alt [|
        Token (Name "variable");
        Token (Name "pipe_variable");
        Token (Name "list_expression");
        Token (Name "subscript_expression");
        Token (Name "qualified_identifier");
        Token (Name "parenthesized_expression");
        Token (Name "call_expression");
        Token (Name "scoped_identifier");
        Token (Name "scope_identifier");
        Token (Name "selection_expression");
        Alt [|
          Token (Name "xhp_identifier");
          Token (Name "xhp_class_identifier");
        |];
      |];
      Opt (
        Token (Name "type_arguments");
      );
      Token (Name "arguments");
    ];
  );
  "parameter",
  Some (
    Alt [|
      Seq [
        Opt (
          Token (Name "attribute_modifier");
        );
        Opt (
          Token (Name "visibility_modifier");
        );
        Opt (
          Token (Name "inout_modifier");
        );
        Opt (
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
        );
        Opt (
          Token (Name "variadic_modifier");
        );
        Token (Name "variable");
        Opt (
          Seq [
            Token (Literal "=");
            Token (Name "expression");
          ];
        );
      ];
      Token (Name "ellipsis");
    |];
  );
  "parameters",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Alt [|
          Token (Name "variadic_modifier");
          Seq [
            Token (Name "parameter");
            Repeat (
              Seq [
                Token (Literal ",");
                Token (Name "parameter");
              ];
            );
            Opt (
              Token (Literal ",");
            );
          ];
        |];
      );
      Token (Literal ")");
    ];
  );
  "parenthesized_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "expression");
      Token (Literal ")");
    ];
  );
  "postfix_unary_expression",
  Some (
    Seq [
      Token (Name "expression");
      Alt [|
        Token (Literal "++");
        Token (Literal "--");
      |];
    ];
  );
  "prefix_unary_expression",
  Some (
    Alt [|
      Seq [
        Token (Literal "!");
        Token (Name "expression");
      ];
      Seq [
        Token (Literal "~");
        Token (Name "expression");
      ];
      Seq [
        Token (Literal "-");
        Token (Name "expression");
      ];
      Seq [
        Token (Literal "+");
        Token (Name "expression");
      ];
      Seq [
        Token (Literal "++");
        Token (Name "expression");
      ];
      Seq [
        Token (Literal "--");
        Token (Name "expression");
      ];
      Seq [
        Token (Literal "print");
        Token (Name "expression");
      ];
      Seq [
        Token (Literal "clone");
        Token (Name "expression");
      ];
      Seq [
        Token (Literal "await");
        Token (Name "expression");
      ];
      Seq [
        Token (Literal "@");
        Token (Name "expression");
      ];
    |];
  );
  "property_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_modifier");
      );
      Repeat (
        Token (Name "member_modifier");
      );
      Opt (
        Alt [|
          Token (Name "type_specifier");
          Token (Name "type_constant");
          Token (Name "shape_type_specifier");
          Token (Name "function_type_specifier");
          Token (Name "tuple_type_specifier");
        |];
      );
      Token (Name "property_declarator");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "property_declarator");
        ];
      );
      Token (Literal ";");
    ];
  );
  "property_declarator",
  Some (
    Seq [
      Token (Name "variable");
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
      );
    ];
  );
  "require_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "require");
        Token (Literal "require_once");
      |];
      Token (Name "expression");
    ];
  );
  "require_extends_clause",
  Some (
    Seq [
      Token (Literal "require");
      Token (Literal "extends");
      Alt [|
        Token (Name "type_specifier");
        Token (Name "type_constant");
        Token (Name "shape_type_specifier");
        Token (Name "function_type_specifier");
        Token (Name "tuple_type_specifier");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
        ];
      );
      Token (Literal ";");
    ];
  );
  "require_implements_clause",
  Some (
    Seq [
      Token (Literal "require");
      Token (Literal "implements");
      Alt [|
        Token (Name "type_specifier");
        Token (Name "type_constant");
        Token (Name "shape_type_specifier");
        Token (Name "function_type_specifier");
        Token (Name "tuple_type_specifier");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
        ];
      );
      Token (Literal ";");
    ];
  );
  "return_statement",
  Some (
    Seq [
      Token (Literal "return");
      Opt (
        Token (Name "expression");
      );
      Token (Literal ";");
    ];
  );
  "selection_expression",
  Some (
    Seq [
      Alt [|
        Alt [|
          Token (Name "variable");
          Token (Name "pipe_variable");
          Token (Name "list_expression");
          Token (Name "subscript_expression");
          Token (Name "qualified_identifier");
          Token (Name "parenthesized_expression");
          Token (Name "call_expression");
          Token (Name "scoped_identifier");
          Token (Name "scope_identifier");
          Token (Name "selection_expression");
          Alt [|
            Token (Name "xhp_identifier");
            Token (Name "xhp_class_identifier");
          |];
        |];
        Token (Name "as_expression");
      |];
      Alt [|
        Token (Literal "?->");
        Token (Literal "->");
      |];
      Alt [|
        Alt [|
          Token (Name "variable");
          Token (Name "pipe_variable");
          Token (Name "list_expression");
          Token (Name "subscript_expression");
          Token (Name "qualified_identifier");
          Token (Name "parenthesized_expression");
          Token (Name "call_expression");
          Token (Name "scoped_identifier");
          Token (Name "scope_identifier");
          Token (Name "selection_expression");
          Alt [|
            Token (Name "xhp_identifier");
            Token (Name "xhp_class_identifier");
          |];
        |];
        Token (Name "braced_expression");
        Alt [|
          Token (Literal "type");
          Token (Literal "newtype");
          Token (Literal "shape");
          Token (Literal "tupe");
          Token (Literal "clone");
          Token (Literal "new");
          Token (Literal "print");
          Alt [|
            Token (Literal "bool");
            Token (Literal "float");
            Token (Literal "int");
            Token (Literal "string");
            Token (Literal "arraykey");
            Token (Literal "void");
            Token (Literal "nonnull");
            Token (Name "null");
            Token (Literal "mixed");
            Token (Literal "dynamic");
            Token (Literal "noreturn");
          |];
          Alt [|
            Token (Literal "array");
            Token (Literal "varray");
            Token (Literal "darray");
            Token (Literal "vec");
            Token (Literal "dict");
            Token (Literal "keyset");
          |];
        |];
      |];
    ];
  );
  "shape",
  Some (
    Seq [
      Token (Literal "shape");
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "field_initializer");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "field_initializer");
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "shape_type_specifier",
  Some (
    Seq [
      Repeat (
        Token (Name "type_modifier");
      );
      Token (Literal "shape");
      Token (Literal "(");
      Opt (
        Seq [
          Alt [|
            Token (Name "field_specifier");
            Token (Literal "...");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "field_specifier");
                Token (Literal "...");
              |];
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "subscript_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "[");
      Opt (
        Token (Name "expression");
      );
      Token (Literal "]");
    ];
  );
  "switch_case",
  Some (
    Seq [
      Token (Literal "case");
      Token (Name "expression");
      Token (Literal ":");
      Repeat (
        Alt [|
          Alt [|
            Token (Name "function_declaration");
            Token (Name "class_declaration");
            Token (Name "interface_declaration");
            Token (Name "trait_declaration");
            Token (Name "alias_declaration");
            Token (Name "enum_declaration");
            Token (Name "namespace_declaration");
            Token (Name "const_declaration");
          |];
          Token (Name "compound_statement");
          Token (Name "empty_statement");
          Token (Name "expression_statement");
          Token (Name "return_statement");
          Token (Name "break_statement");
          Token (Name "continue_statement");
          Token (Name "throw_statement");
          Token (Name "echo_statement");
          Token (Name "unset_statement");
          Token (Name "use_statement");
          Token (Name "if_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "for_statement");
          Token (Name "switch_statement");
          Token (Name "foreach_statement");
          Token (Name "try_statement");
          Token (Name "concurrent_statement");
          Token (Name "using_statement");
        |];
      );
    ];
  );
  "switch_default",
  Some (
    Seq [
      Token (Literal "default");
      Token (Literal ":");
      Repeat (
        Alt [|
          Alt [|
            Token (Name "function_declaration");
            Token (Name "class_declaration");
            Token (Name "interface_declaration");
            Token (Name "trait_declaration");
            Token (Name "alias_declaration");
            Token (Name "enum_declaration");
            Token (Name "namespace_declaration");
            Token (Name "const_declaration");
          |];
          Token (Name "compound_statement");
          Token (Name "empty_statement");
          Token (Name "expression_statement");
          Token (Name "return_statement");
          Token (Name "break_statement");
          Token (Name "continue_statement");
          Token (Name "throw_statement");
          Token (Name "echo_statement");
          Token (Name "unset_statement");
          Token (Name "use_statement");
          Token (Name "if_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "for_statement");
          Token (Name "switch_statement");
          Token (Name "foreach_statement");
          Token (Name "try_statement");
          Token (Name "concurrent_statement");
          Token (Name "using_statement");
        |];
      );
    ];
  );
  "switch_statement",
  Some (
    Seq [
      Token (Literal "switch");
      Token (Name "parenthesized_expression");
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "switch_case");
          Token (Name "switch_default");
        |];
      );
      Token (Literal "}");
    ];
  );
  "ternary_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "?");
      Token (Name "expression");
      Token (Literal ":");
      Token (Name "expression");
    ];
  );
  "throw_statement",
  Some (
    Seq [
      Token (Literal "throw");
      Token (Name "expression");
      Token (Literal ";");
    ];
  );
  "trait_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_modifier");
      );
      Token (Literal "trait");
      Token (Name "semgrep_extended_identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Token (Name "implements_clause");
      );
      Opt (
        Token (Name "where_clause");
      );
      Token (Name "member_declarations");
    ];
  );
  "trait_use_clause",
  Some (
    Seq [
      Token (Literal "use");
      Alt [|
        Token (Name "type_specifier");
        Token (Name "type_constant");
        Token (Name "shape_type_specifier");
        Token (Name "function_type_specifier");
        Token (Name "tuple_type_specifier");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
        ];
      );
      Alt [|
        Seq [
          Token (Literal "{");
          Repeat (
            Seq [
              Alt [|
                Token (Name "trait_select_clause");
                Token (Name "trait_alias_clause");
              |];
              Token (Literal ";");
            ];
          );
          Token (Literal "}");
        ];
        Token (Literal ";");
      |];
    ];
  );
  "try_statement",
  Some (
    Seq [
      Token (Literal "try");
      Token (Name "compound_statement");
      Repeat (
        Token (Name "catch_clause");
      );
      Alt [|
        Token (Name "catch_clause");
        Token (Name "finally_clause");
      |];
    ];
  );
  "tuple",
  Some (
    Seq [
      Token (Literal "tuple");
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "expression");
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "tuple_type_specifier",
  Some (
    Seq [
      Repeat (
        Token (Name "type_modifier");
      );
      Token (Literal "(");
      Alt [|
        Token (Name "type_specifier");
        Token (Name "type_constant");
        Token (Name "shape_type_specifier");
        Token (Name "function_type_specifier");
        Token (Name "tuple_type_specifier");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "type_arguments",
  Some (
    Seq [
      Token (Literal "<");
      Opt (
        Seq [
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "type_specifier");
                Token (Name "type_constant");
                Token (Name "shape_type_specifier");
                Token (Name "function_type_specifier");
                Token (Name "tuple_type_specifier");
              |];
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ">");
    ];
  );
  "type_const_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_modifier");
      );
      Repeat (
        Token (Name "member_modifier");
      );
      Token (Literal "const");
      Token (Literal "type");
      Token (Name "semgrep_extended_identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Seq [
          Token (Literal "as");
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
        ];
      );
      Opt (
        Seq [
          Token (Literal "=");
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
        ];
      );
      Token (Literal ";");
    ];
  );
  "type_parameter",
  Some (
    Seq [
      Opt (
        Token (Name "attribute_modifier");
      );
      Opt (
        Alt [|
          Token (Literal "+");
          Token (Literal "-");
          Token (Literal "reify");
        |];
      );
      Token (Name "identifier");
      Repeat (
        Seq [
          Alt [|
            Token (Literal "as");
            Token (Literal "super");
          |];
          Alt [|
            Token (Name "type_specifier");
            Token (Name "type_constant");
            Token (Name "shape_type_specifier");
            Token (Name "function_type_specifier");
            Token (Name "tuple_type_specifier");
          |];
        ];
      );
    ];
  );
  "type_parameters",
  Some (
    Seq [
      Token (Literal "<");
      Token (Name "type_parameter");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type_parameter");
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ">");
    ];
  );
  "type_specifier",
  Some (
    Seq [
      Repeat (
        Token (Name "type_modifier");
      );
      Alt [|
        Alt [|
          Token (Literal "bool");
          Token (Literal "float");
          Token (Literal "int");
          Token (Literal "string");
          Token (Literal "arraykey");
          Token (Literal "void");
          Token (Literal "nonnull");
          Token (Name "null");
          Token (Literal "mixed");
          Token (Literal "dynamic");
          Token (Literal "noreturn");
        |];
        Token (Name "qualified_identifier");
        Alt [|
          Token (Literal "array");
          Token (Literal "varray");
          Token (Literal "darray");
          Token (Literal "vec");
          Token (Literal "dict");
          Token (Literal "keyset");
        |];
        Alt [|
          Token (Name "xhp_identifier");
          Token (Name "xhp_class_identifier");
        |];
      |];
      Opt (
        Token (Name "type_arguments");
      );
    ];
  );
  "unset_statement",
  Some (
    Seq [
      Token (Literal "unset");
      Token (Literal "(");
      Opt (
        Seq [
          Alt [|
            Token (Name "variable");
            Token (Name "pipe_variable");
            Token (Name "list_expression");
            Token (Name "subscript_expression");
            Token (Name "qualified_identifier");
            Token (Name "parenthesized_expression");
            Token (Name "call_expression");
            Token (Name "scoped_identifier");
            Token (Name "scope_identifier");
            Token (Name "selection_expression");
            Alt [|
              Token (Name "xhp_identifier");
              Token (Name "xhp_class_identifier");
            |];
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "variable");
                Token (Name "pipe_variable");
                Token (Name "list_expression");
                Token (Name "subscript_expression");
                Token (Name "qualified_identifier");
                Token (Name "parenthesized_expression");
                Token (Name "call_expression");
                Token (Name "scoped_identifier");
                Token (Name "scope_identifier");
                Token (Name "selection_expression");
                Alt [|
                  Token (Name "xhp_identifier");
                  Token (Name "xhp_class_identifier");
                |];
              |];
            ];
          );
        ];
      );
      Token (Literal ")");
      Token (Literal ";");
    ];
  );
  "using_statement",
  Some (
    Seq [
      Opt (
        Token (Name "await_modifier");
      );
      Token (Literal "using");
      Alt [|
        Token (Name "expression_statement");
        Seq [
          Token (Literal "(");
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "expression");
            ];
          );
          Token (Literal ")");
          Alt [|
            Token (Name "compound_statement");
            Token (Literal ";");
          |];
        ];
      |];
    ];
  );
  "where_clause",
  Some (
    Seq [
      Token (Literal "where");
      Repeat1 (
        Seq [
          Token (Name "where_constraint");
          Opt (
            Token (Literal ",");
          );
        ];
      );
    ];
  );
  "where_constraint",
  Some (
    Seq [
      Alt [|
        Token (Name "type_specifier");
        Token (Name "type_constant");
        Token (Name "shape_type_specifier");
        Token (Name "function_type_specifier");
        Token (Name "tuple_type_specifier");
      |];
      Alt [|
        Token (Literal "as");
        Token (Literal "super");
        Token (Literal "=");
      |];
      Alt [|
        Token (Name "type_specifier");
        Token (Name "type_constant");
        Token (Name "shape_type_specifier");
        Token (Name "function_type_specifier");
        Token (Name "tuple_type_specifier");
      |];
    ];
  );
  "while_statement",
  Some (
    Seq [
      Token (Literal "while");
      Token (Name "parenthesized_expression");
      Alt [|
        Alt [|
          Token (Name "function_declaration");
          Token (Name "class_declaration");
          Token (Name "interface_declaration");
          Token (Name "trait_declaration");
          Token (Name "alias_declaration");
          Token (Name "enum_declaration");
          Token (Name "namespace_declaration");
          Token (Name "const_declaration");
        |];
        Token (Name "compound_statement");
        Token (Name "empty_statement");
        Token (Name "expression_statement");
        Token (Name "return_statement");
        Token (Name "break_statement");
        Token (Name "continue_statement");
        Token (Name "throw_statement");
        Token (Name "echo_statement");
        Token (Name "unset_statement");
        Token (Name "use_statement");
        Token (Name "if_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "for_statement");
        Token (Name "switch_statement");
        Token (Name "foreach_statement");
        Token (Name "try_statement");
        Token (Name "concurrent_statement");
        Token (Name "using_statement");
      |];
    ];
  );
  "xhp_attribute",
  Some (
    Alt [|
      Seq [
        Token (Name "xhp_identifier");
        Token (Literal "=");
        Alt [|
          Token (Name "string");
          Token (Name "braced_expression");
        |];
      ];
      Alt [|
        Token (Name "braced_expression");
        Token (Name "xhp_spread_expression");
      |];
    |];
  );
  "xhp_attribute_declaration",
  Some (
    Seq [
      Token (Literal "attribute");
      Token (Name "xhp_class_attribute");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "xhp_class_attribute");
        ];
      );
      Token (Literal ";");
    ];
  );
  "xhp_class_attribute",
  Some (
    Seq [
      Alt [|
        Alt [|
          Token (Name "type_specifier");
          Token (Name "type_constant");
          Token (Name "shape_type_specifier");
          Token (Name "function_type_specifier");
          Token (Name "tuple_type_specifier");
        |];
        Token (Name "xhp_enum_type");
      |];
      Opt (
        Token (Name "xhp_identifier");
      );
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
      );
      Opt (
        Alt [|
          Token (Literal "@required");
          Token (Literal "@lateinit");
        |];
      );
    ];
  );
  "xhp_expression",
  Some (
    Alt [|
      Token (Name "xhp_open_close");
      Seq [
        Token (Name "xhp_open");
        Repeat (
          Alt [|
            Token (Name "xhp_string");
            Token (Name "xhp_comment");
            Token (Name "braced_expression");
            Token (Name "xhp_expression");
          |];
        );
        Token (Name "xhp_close");
      ];
    |];
  );
  "xhp_open",
  Some (
    Seq [
      Token (Literal "<");
      Alt [|
        Token (Name "xhp_identifier");
        Token (Name "xhp_class_identifier");
      |];
      Repeat (
        Token (Name "xhp_attribute");
      );
      Token (Literal ">");
    ];
  );
  "xhp_open_close",
  Some (
    Seq [
      Token (Literal "<");
      Alt [|
        Token (Name "xhp_identifier");
        Token (Name "xhp_class_identifier");
      |];
      Repeat (
        Token (Name "xhp_attribute");
      );
      Token (Literal "/>");
    ];
  );
  "xhp_spread_expression",
  Some (
    Seq [
      Token (Literal "{");
      Token (Literal "...");
      Token (Name "expression");
      Token (Literal "}");
    ];
  );
  "yield_expression",
  Some (
    Seq [
      Token (Literal "yield");
      Alt [|
        Token (Name "expression");
        Token (Name "element_initializer");
      |];
    ];
  );
  "script",
  Some (
    Seq [
      Opt (
        Token (Name "pat_b6fe07e");
      );
      Repeat (
        Alt [|
          Alt [|
            Token (Name "function_declaration");
            Token (Name "class_declaration");
            Token (Name "interface_declaration");
            Token (Name "trait_declaration");
            Token (Name "alias_declaration");
            Token (Name "enum_declaration");
            Token (Name "namespace_declaration");
            Token (Name "const_declaration");
          |];
          Token (Name "compound_statement");
          Token (Name "empty_statement");
          Token (Name "expression_statement");
          Token (Name "return_statement");
          Token (Name "break_statement");
          Token (Name "continue_statement");
          Token (Name "throw_statement");
          Token (Name "echo_statement");
          Token (Name "unset_statement");
          Token (Name "use_statement");
          Token (Name "if_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "for_statement");
          Token (Name "switch_statement");
          Token (Name "foreach_statement");
          Token (Name "try_statement");
          Token (Name "concurrent_statement");
          Token (Name "using_statement");
        |];
      );
    ];
  );
]

let trans_heredoc_start ((kind, body) : mt) : CST.heredoc_start =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_true_ ((kind, body) : mt) : CST.true_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `True_b326b50 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `True_f827cf4 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `TRUE (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_await_modifier ((kind, body) : mt) : CST.await_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pipe_variable ((kind, body) : mt) : CST.pipe_variable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_float_ ((kind, body) : mt) : CST.float_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_heredoc_body ((kind, body) : mt) : CST.heredoc_body =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_false_ ((kind, body) : mt) : CST.false_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `False_68934a3 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `False_f8320b2 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `FALSE (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_xhp_comment ((kind, body) : mt) : CST.xhp_comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_lcurldollar_pat_0e8e4b6 ((kind, body) : mt) : CST.tok_lcurldollar_pat_0e8e4b6 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_type_modifier ((kind, body) : mt) : CST.type_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `AT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `QMARK (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `TILDE (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_async_modifier ((kind, body) : mt) : CST.async_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_heredoc_end ((kind, body) : mt) : CST.heredoc_end =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_inout_modifier ((kind, body) : mt) : CST.inout_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_use_type ((kind, body) : mt) : CST.use_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Name (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Func (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Type (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Const (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_final_modifier ((kind, body) : mt) : CST.final_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_heredoc_start_newline ((kind, body) : mt) : CST.heredoc_start_newline =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_heredoc_end_newline ((kind, body) : mt) : CST.heredoc_end_newline =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_xhp_class_identifier ((kind, body) : mt) : CST.xhp_class_identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_variadic_modifier ((kind, body) : mt) : CST.variadic_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_null ((kind, body) : mt) : CST.null =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Null_37a6259 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Null_bbb93ef (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `NULL (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_semgrep_identifier ((kind, body) : mt) : CST.semgrep_identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_visibility_modifier ((kind, body) : mt) : CST.visibility_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Public (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Prot (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Priv (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_variable ((kind, body) : mt) : CST.variable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_scope_identifier ((kind, body) : mt) : CST.scope_identifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Self (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Parent (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Static (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_xhp_string ((kind, body) : mt) : CST.xhp_string =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_xhp_identifier ((kind, body) : mt) : CST.xhp_identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_integer ((kind, body) : mt) : CST.integer =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_466b599 ((kind, body) : mt) : CST.pat_466b599 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_xhp_category_identifier ((kind, body) : mt) : CST.xhp_category_identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_pdyn_p1_as ((kind, body) : mt) : CST.tok_pdyn_p1_as =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_xhp_modifier ((kind, body) : mt) : CST.xhp_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_ ((kind, body) : mt) : CST.string_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_backslash ((kind, body) : mt) : CST.backslash =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ellipsis ((kind, body) : mt) : CST.ellipsis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_abstract_modifier ((kind, body) : mt) : CST.abstract_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_pdyn_n1_as ((kind, body) : mt) : CST.tok_pdyn_n1_as =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_variadic_identifier ((kind, body) : mt) : CST.semgrep_variadic_identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_pat_b6fe07e ((kind, body) : mt) : CST.pat_b6fe07e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_static_modifier ((kind, body) : mt) : CST.static_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false



let trans_single_parameter ((kind, body) : mt) : CST.single_parameter =
  match body with
  | Children v ->
      trans_variable (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_anonymous_function_use_clause ((kind, body) : mt) : CST.anonymous_function_use_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_variable (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_variable (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_xhp_close ((kind, body) : mt) : CST.xhp_close =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Xhp_id (
                  trans_xhp_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Xhp_class_id (
                  trans_xhp_class_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let rec trans_xhp_binary_expression ((kind, body) : mt) : CST.xhp_binary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Xhp_id (
                  trans_xhp_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Xhp_class_id (
                  trans_xhp_class_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Xhp_cate_id (
                  trans_xhp_category_identifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Xhp_bin_exp (
                  trans_xhp_binary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Xhp_post_un_exp (
                  trans_xhp_postfix_unary_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Xhp_paren_exp (
                  trans_xhp_parenthesized_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Xhp_id (
                  trans_xhp_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Xhp_class_id (
                  trans_xhp_class_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Xhp_cate_id (
                  trans_xhp_category_identifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Xhp_bin_exp (
                  trans_xhp_binary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Xhp_post_un_exp (
                  trans_xhp_postfix_unary_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Xhp_paren_exp (
                  trans_xhp_parenthesized_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_xhp_parenthesized_expression ((kind, body) : mt) : CST.xhp_parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Xhp_id (
                  trans_xhp_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Xhp_class_id (
                  trans_xhp_class_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Xhp_cate_id (
                  trans_xhp_category_identifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Xhp_bin_exp (
                  trans_xhp_binary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Xhp_post_un_exp (
                  trans_xhp_postfix_unary_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Xhp_paren_exp (
                  trans_xhp_parenthesized_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Xhp_id (
                            trans_xhp_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Xhp_class_id (
                            trans_xhp_class_identifier (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Xhp_cate_id (
                            trans_xhp_category_identifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Xhp_bin_exp (
                            trans_xhp_binary_expression (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Xhp_post_un_exp (
                            trans_xhp_postfix_unary_expression (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Xhp_paren_exp (
                            trans_xhp_parenthesized_expression (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_xhp_postfix_unary_expression ((kind, body) : mt) : CST.xhp_postfix_unary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Xhp_id (
                  trans_xhp_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Xhp_class_id (
                  trans_xhp_class_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Xhp_cate_id (
                  trans_xhp_category_identifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Xhp_bin_exp (
                  trans_xhp_binary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Xhp_post_un_exp (
                  trans_xhp_postfix_unary_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Xhp_paren_exp (
                  trans_xhp_parenthesized_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `PLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `STAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `QMARK (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_xhp_category_declaration ((kind, body) : mt) : CST.xhp_category_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_xhp_category_identifier (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_xhp_category_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_xhp_enum_type ((kind, body) : mt) : CST.xhp_enum_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Int (
                  trans_integer (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Str (
                            trans_string_ (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Int (
                            trans_integer (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_empty_statement ((kind, body) : mt) : CST.empty_statement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `SEMI (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Ellips (
            trans_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_member_modifier ((kind, body) : mt) : CST.member_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Visi_modi (
            trans_visibility_modifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Static_modi (
            trans_static_modifier (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Abst_modi (
            trans_abstract_modifier (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Final_modi (
            trans_final_modifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_prefixed_string ((kind, body) : mt) : CST.prefixed_string =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            trans_string_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_trait_alias_clause ((kind, body) : mt) : CST.trait_alias_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Visi_modi_opt_id (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_visibility_modifier (Run.matcher_token v0),
                        Run.opt
                          (fun v -> trans_identifier (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Opt_visi_modi_id (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v -> trans_visibility_modifier (Run.matcher_token v))
                          v0
                        ,
                        trans_identifier (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_qualified_identifier ((kind, body) : mt) : CST.qualified_identifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_opt_id_rep1_back_id (
            (match v with
            | Alt (0, v) ->
                `Opt_id_rep1_back_id (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v -> trans_identifier (Run.matcher_token v))
                          v0
                        ,
                        Run.repeat1
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_backslash (Run.matcher_token v0),
                                  trans_identifier (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Semg_id (
            trans_semgrep_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_semgrep_extended_identifier ((kind, body) : mt) : CST.semgrep_extended_identifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_id (
            trans_semgrep_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_single_parameter_parameters ((kind, body) : mt) : CST.single_parameter_parameters =
  match body with
  | Children v ->
      trans_single_parameter (Run.matcher_token v)
  | Leaf _ -> assert false


let trans_xhp_children_declaration ((kind, body) : mt) : CST.xhp_children_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Xhp_id (
                  trans_xhp_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Xhp_class_id (
                  trans_xhp_class_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Xhp_cate_id (
                  trans_xhp_category_identifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Xhp_bin_exp (
                  trans_xhp_binary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Xhp_post_un_exp (
                  trans_xhp_postfix_unary_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Xhp_paren_exp (
                  trans_xhp_parenthesized_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Xhp_id (
                            trans_xhp_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Xhp_class_id (
                            trans_xhp_class_identifier (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Xhp_cate_id (
                            trans_xhp_category_identifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Xhp_bin_exp (
                            trans_xhp_binary_expression (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Xhp_post_un_exp (
                            trans_xhp_postfix_unary_expression (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Xhp_paren_exp (
                            trans_xhp_parenthesized_expression (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_trait_select_clause ((kind, body) : mt) : CST.trait_select_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_qualified_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_qualified_identifier (Run.matcher_token v4),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_qualified_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_namespace_identifier ((kind, body) : mt) : CST.namespace_identifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Qual_id_opt_back (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_qualified_identifier (Run.matcher_token v0),
                  Run.opt
                    (fun v -> trans_backslash (Run.matcher_token v))
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Back (
            trans_backslash (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_type_constant_ ((kind, body) : mt) : CST.type_constant_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Qual_id (
                  trans_qualified_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst_ (
                  trans_type_constant_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_scoped_identifier ((kind, body) : mt) : CST.scoped_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Qual_id (
                  trans_qualified_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Var (
                  trans_variable (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Scope_id (
                  trans_scope_identifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Choice_xhp_id (
                  (match v with
                  | Alt (0, v) ->
                      `Xhp_id (
                        trans_xhp_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Xhp_class_id (
                        trans_xhp_class_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (4, v) ->
                `Pipe_var (
                  trans_pipe_variable (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Var (
                  trans_variable (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_use_clause ((kind, body) : mt) : CST.use_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_use_type (Run.matcher_token v))
              v0
            ,
            trans_namespace_identifier (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_type_constant ((kind, body) : mt) : CST.type_constant =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.repeat
              (fun v -> trans_type_modifier (Run.matcher_token v))
              v0
            ,
            trans_type_constant_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_use_statement ((kind, body) : mt) : CST.use_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Use_clause_rep_COMMA_use_clause_opt_COMMA (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_use_clause (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_use_clause (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Opt_use_type_name_id_LCURL_use_clause_rep_COMMA_use_clause_opt_COMMA_RCURL (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4; v5; v6] ->
                      (
                        Run.opt
                          (fun v -> trans_use_type (Run.matcher_token v))
                          v0
                        ,
                        trans_namespace_identifier (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2),
                        trans_use_clause (Run.matcher_token v3),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_use_clause (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v4
                        ,
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v5
                        ,
                        Run.trans_token (Run.matcher_token v6)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_alias_declaration ((kind, body) : mt) : CST.alias_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.opt
              (fun v -> trans_attribute_modifier (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Type (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Newt (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_semgrep_extended_identifier (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5),
            (match v6 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst (
                  trans_type_constant (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Shape_type_spec (
                  trans_shape_type_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type_spec (
                  trans_function_type_specifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Tuple_type_spec (
                  trans_tuple_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v7)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_anonymous_function_expression ((kind, body) : mt) : CST.anonymous_function_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> trans_async_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_parameters (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v ->
                trans_anonymous_function_use_clause (Run.matcher_token v)
              )
              v4
            ,
            trans_compound_statement (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_argument ((kind, body) : mt) : CST.argument =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Opt_choice_inout_modi_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.opt
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Inout_modi (
                            trans_inout_modifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Vari_modi (
                            trans_variadic_modifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v0
                  ,
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Semg_vari_id (
            trans_semgrep_variadic_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_arguments ((kind, body) : mt) : CST.arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_argument (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_argument (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_ ((kind, body) : mt) : CST.array_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Array (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Varray (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Darray (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Vec (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Dict (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Keyset (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_arguments (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Exp (
                            trans_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Elem_init (
                            trans_element_initializer (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Exp (
                                      trans_expression (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Elem_init (
                                      trans_element_initializer (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_as_expression ((kind, body) : mt) : CST.as_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Tok_pdyn_n1_as (
                  trans_tok_pdyn_n1_as (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `QMARKas (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst (
                  trans_type_constant (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Shape_type_spec (
                  trans_shape_type_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type_spec (
                  trans_function_type_specifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Tuple_type_spec (
                  trans_tuple_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attribute_modifier ((kind, body) : mt) : CST.attribute_modifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_qualified_identifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_arguments (Run.matcher_token v))
              v2
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_qualified_identifier (Run.matcher_token v1),
                      Run.opt
                        (fun v -> trans_arguments (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_awaitable_expression ((kind, body) : mt) : CST.awaitable_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_compound_statement (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_expression ((kind, body) : mt) : CST.binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_BARGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_QMARKQMARK_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Exp_BARBAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Exp_AMPAMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Exp_BAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Exp_HAT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Exp_AMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Exp_EQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Exp_BANGEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (9, v) ->
          `Exp_EQEQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (10, v) ->
          `Exp_BANGEQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (11, v) ->
          `Exp_LT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (12, v) ->
          `Exp_GT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (13, v) ->
          `Exp_LTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (14, v) ->
          `Exp_GTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (15, v) ->
          `Exp_LTEQGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (16, v) ->
          `Exp_LTLT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (17, v) ->
          `Exp_GTGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (18, v) ->
          `Exp_PLUS_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (19, v) ->
          `Exp_DASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (20, v) ->
          `Exp_DOT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (21, v) ->
          `Exp_STAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (22, v) ->
          `Exp_SLASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (23, v) ->
          `Exp_PERC_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (24, v) ->
          `Exp_STARSTAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (25, v) ->
          `Exp_QMARKCOLON_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (26, v) ->
          `Exp_EQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (27, v) ->
          `Exp_QMARKQMARKEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (28, v) ->
          `Exp_DOTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (29, v) ->
          `Exp_BAREQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (30, v) ->
          `Exp_HATEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (31, v) ->
          `Exp_AMPEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (32, v) ->
          `Exp_LTLTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (33, v) ->
          `Exp_GTGTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (34, v) ->
          `Exp_PLUSEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (35, v) ->
          `Exp_DASHEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (36, v) ->
          `Exp_STAREQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (37, v) ->
          `Exp_SLASHEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (38, v) ->
          `Exp_PERCEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (39, v) ->
          `Exp_STARSTAREQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_braced_expression ((kind, body) : mt) : CST.braced_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_break_statement ((kind, body) : mt) : CST.break_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_expression ((kind, body) : mt) : CST.call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_array (
                  (match v with
                  | Alt (0, v) ->
                      `Array (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Varray (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Darray (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Vec (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Dict (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Keyset (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_arguments (Run.matcher_token v))
              v1
            ,
            trans_arguments (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_cast_expression ((kind, body) : mt) : CST.cast_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Array (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Int (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Float (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Str (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Bool (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_expression (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_catch_clause ((kind, body) : mt) : CST.catch_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst (
                  trans_type_constant (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Shape_type_spec (
                  trans_shape_type_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type_spec (
                  trans_function_type_specifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Tuple_type_spec (
                  trans_tuple_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_variable (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4),
            trans_compound_statement (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_const_declaration ((kind, body) : mt) : CST.class_const_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.repeat
              (fun v -> trans_member_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Type_spec (
                      trans_type_specifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Type_cst (
                      trans_type_constant (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Shape_type_spec (
                      trans_shape_type_specifier (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Func_type_spec (
                      trans_function_type_specifier (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Tuple_type_spec (
                      trans_tuple_type_specifier (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_class_const_declarator (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_class_const_declarator (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_const_declarator ((kind, body) : mt) : CST.class_const_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Semg_exte_id (
                  trans_semgrep_extended_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_type (
                  (match v with
                  | Alt (0, v) ->
                      `Type (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Newt (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Shape (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Tupe (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Clone (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `New (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Print (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Choice_bool (
                        (match v with
                        | Alt (0, v) ->
                            `Bool (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Float (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Int (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Str (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Arra (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Void (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Nonn (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Null (
                              trans_null (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Mixed (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Dyna (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Nore (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (8, v) ->
                      `Choice_array (
                        (match v with
                        | Alt (0, v) ->
                            `Array (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Varray (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Darray (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Vec (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Dict (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Keyset (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_declaration ((kind, body) : mt) : CST.class_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8; v9; v10] ->
          (
            Run.opt
              (fun v -> trans_attribute_modifier (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Abst_modi (
                      trans_abstract_modifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Final_modi (
                      trans_final_modifier (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Abst_modi (
                      trans_abstract_modifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Final_modi (
                      trans_final_modifier (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> trans_xhp_modifier (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4),
            (match v5 with
            | Alt (0, v) ->
                `Semg_exte_id (
                  trans_semgrep_extended_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_xhp_id (
                  (match v with
                  | Alt (0, v) ->
                      `Xhp_id (
                        trans_xhp_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Xhp_class_id (
                        trans_xhp_class_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v6
            ,
            Run.opt
              (fun v -> trans_extends_clause (Run.matcher_token v))
              v7
            ,
            Run.opt
              (fun v -> trans_implements_clause (Run.matcher_token v))
              v8
            ,
            Run.opt
              (fun v -> trans_where_clause (Run.matcher_token v))
              v9
            ,
            trans_member_declarations (Run.matcher_token v10)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_collection ((kind, body) : mt) : CST.collection =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_qualified_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Exp (
                            trans_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Elem_init (
                            trans_element_initializer (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Exp (
                                      trans_expression (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Elem_init (
                                      trans_element_initializer (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_compound_statement ((kind, body) : mt) : CST.compound_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_func_decl (
                      (match v with
                      | Alt (0, v) ->
                          `Func_decl (
                            trans_function_declaration (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Class_decl (
                            trans_class_declaration (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Inte_decl (
                            trans_interface_declaration (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Trait_decl (
                            trans_trait_declaration (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Alias_decl (
                            trans_alias_declaration (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Enum_decl (
                            trans_enum_declaration (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Name_decl (
                            trans_namespace_declaration (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Const_decl (
                            trans_const_declaration (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Comp_stmt (
                      trans_compound_statement (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Exp_stmt (
                      trans_expression_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Ret_stmt (
                      trans_return_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Cont_stmt (
                      trans_continue_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Throw_stmt (
                      trans_throw_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Echo_stmt (
                      trans_echo_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Unset_stmt (
                      trans_unset_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Use_stmt (
                      trans_use_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Switch_stmt (
                      trans_switch_statement (Run.matcher_token v)
                    )
                | Alt (16, v) ->
                    `Fore_stmt (
                      trans_foreach_statement (Run.matcher_token v)
                    )
                | Alt (17, v) ->
                    `Try_stmt (
                      trans_try_statement (Run.matcher_token v)
                    )
                | Alt (18, v) ->
                    `Conc_stmt (
                      trans_concurrent_statement (Run.matcher_token v)
                    )
                | Alt (19, v) ->
                    `Using_stmt (
                      trans_using_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_concurrent_statement ((kind, body) : mt) : CST.concurrent_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_compound_statement (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_const_declaration ((kind, body) : mt) : CST.const_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Type_spec (
                      trans_type_specifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Type_cst (
                      trans_type_constant (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Shape_type_spec (
                      trans_shape_type_specifier (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Func_type_spec (
                      trans_function_type_specifier (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Tuple_type_spec (
                      trans_tuple_type_specifier (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_const_declarator (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_const_declarator (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_const_declarator ((kind, body) : mt) : CST.const_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Semg_exte_id (
                  trans_semgrep_extended_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_type (
                  (match v with
                  | Alt (0, v) ->
                      `Type (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Newt (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Shape (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Tupe (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Clone (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `New (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Print (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Choice_bool (
                        (match v with
                        | Alt (0, v) ->
                            `Bool (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Float (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Int (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Str (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Arra (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Void (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Nonn (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Null (
                              trans_null (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Mixed (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Dyna (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Nore (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (8, v) ->
                      `Choice_array (
                        (match v with
                        | Alt (0, v) ->
                            `Array (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Varray (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Darray (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Vec (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Dict (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Keyset (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_continue_statement ((kind, body) : mt) : CST.continue_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_deep_ellipsis ((kind, body) : mt) : CST.deep_ellipsis =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_do_statement ((kind, body) : mt) : CST.do_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Choice_func_decl (
                  (match v with
                  | Alt (0, v) ->
                      `Func_decl (
                        trans_function_declaration (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Class_decl (
                        trans_class_declaration (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Inte_decl (
                        trans_interface_declaration (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Trait_decl (
                        trans_trait_declaration (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Alias_decl (
                        trans_alias_declaration (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Enum_decl (
                        trans_enum_declaration (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Name_decl (
                        trans_namespace_declaration (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Const_decl (
                        trans_const_declaration (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Throw_stmt (
                  trans_throw_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Echo_stmt (
                  trans_echo_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Unset_stmt (
                  trans_unset_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Use_stmt (
                  trans_use_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Fore_stmt (
                  trans_foreach_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Conc_stmt (
                  trans_concurrent_statement (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Using_stmt (
                  trans_using_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_parenthesized_expression (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_echo_statement ((kind, body) : mt) : CST.echo_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_element_initializer ((kind, body) : mt) : CST.element_initializer =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_embedded_brace_call_expression ((kind, body) : mt) : CST.embedded_brace_call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_embedded_brace_expression_ (Run.matcher_token v0),
            trans_arguments (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_embedded_brace_expression ((kind, body) : mt) : CST.embedded_brace_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_embedded_brace_expression_ (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_embedded_brace_expression_ ((kind, body) : mt) : CST.embedded_brace_expression_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Tok_lcur_pat_0e8e4b6 (
            trans_tok_lcurldollar_pat_0e8e4b6 (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Embe_brace_call_exp (
            trans_embedded_brace_call_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Embe_brace_subs_exp (
            trans_embedded_brace_subscript_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Embe_brace_sele_exp (
            trans_embedded_brace_selection_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_embedded_brace_selection_expression ((kind, body) : mt) : CST.embedded_brace_selection_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_embedded_brace_expression_ (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `QMARKDASHGT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASHGT (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Var (
                  trans_variable (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pipe_var (
                  trans_pipe_variable (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `List_exp (
                  trans_list_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Subs_exp (
                  trans_subscript_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Qual_id (
                  trans_qualified_identifier (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Paren_exp (
                  trans_parenthesized_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Scoped_id (
                  trans_scoped_identifier (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Scope_id (
                  trans_scope_identifier (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Sele_exp (
                  trans_selection_expression (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Choice_xhp_id (
                  (match v with
                  | Alt (0, v) ->
                      `Xhp_id (
                        trans_xhp_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Xhp_class_id (
                        trans_xhp_class_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_embedded_brace_subscript_expression ((kind, body) : mt) : CST.embedded_brace_subscript_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_embedded_brace_expression_ (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_declaration ((kind, body) : mt) : CST.enum_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            Run.opt
              (fun v -> trans_attribute_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_semgrep_extended_identifier (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst (
                  trans_type_constant (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Shape_type_spec (
                  trans_shape_type_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type_spec (
                  trans_function_type_specifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Tuple_type_spec (
                  trans_tuple_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            Run.trans_token (Run.matcher_token v6),
            Run.repeat
              (fun v -> trans_enumerator (Run.matcher_token v))
              v7
            ,
            Run.trans_token (Run.matcher_token v8)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enumerator ((kind, body) : mt) : CST.enumerator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_semgrep_extended_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_here (
            (match v with
            | Alt (0, v) ->
                `Here (
                  trans_heredoc (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Array (
                  trans_array_ (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Tuple (
                  trans_tuple (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Shape (
                  trans_shape (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Coll (
                  trans_collection (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Choice_str (
                  (match v with
                  | Alt (0, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Int (
                        trans_integer (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Float (
                        trans_float_ (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `True (
                        trans_true_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `False (
                        trans_false_ (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Null (
                        trans_null (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (6, v) ->
                `Choice_var (
                  (match v with
                  | Alt (0, v) ->
                      `Var (
                        trans_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Pipe_var (
                        trans_pipe_variable (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `List_exp (
                        trans_list_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Subs_exp (
                        trans_subscript_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Qual_id (
                        trans_qualified_identifier (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Paren_exp (
                        trans_parenthesized_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Scoped_id (
                        trans_scoped_identifier (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Scope_id (
                        trans_scope_identifier (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Sele_exp (
                        trans_selection_expression (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Choice_xhp_id (
                        (match v with
                        | Alt (0, v) ->
                            `Xhp_id (
                              trans_xhp_identifier (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Xhp_class_id (
                              trans_xhp_class_identifier (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (7, v) ->
                `Pref_str (
                  trans_prefixed_string (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Paren_exp (
                  trans_parenthesized_expression (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Bin_exp (
                  trans_binary_expression (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Prefix_un_exp (
                  trans_prefix_unary_expression (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Post_un_exp (
                  trans_postfix_unary_expression (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Is_exp (
                  trans_is_expression (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `As_exp (
                  trans_as_expression (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Awai_exp (
                  trans_awaitable_expression (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Yield_exp (
                  trans_yield_expression (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Cast_exp (
                  trans_cast_expression (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Tern_exp (
                  trans_ternary_expression (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Lambda_exp (
                  trans_lambda_expression (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (20, v) ->
                `Sele_exp (
                  trans_selection_expression (Run.matcher_token v)
                )
            | Alt (21, v) ->
                `New_exp (
                  trans_new_expression (Run.matcher_token v)
                )
            | Alt (22, v) ->
                `Incl_exp (
                  trans_include_expression (Run.matcher_token v)
                )
            | Alt (23, v) ->
                `Requ_exp (
                  trans_require_expression (Run.matcher_token v)
                )
            | Alt (24, v) ->
                `Anon_func_exp (
                  trans_anonymous_function_expression (Run.matcher_token v)
                )
            | Alt (25, v) ->
                `Xhp_exp (
                  trans_xhp_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Ellips (
            trans_ellipsis (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Deep_ellips (
            trans_deep_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression_statement ((kind, body) : mt) : CST.expression_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_extends_clause ((kind, body) : mt) : CST.extends_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst (
                  trans_type_constant (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Shape_type_spec (
                  trans_shape_type_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type_spec (
                  trans_function_type_specifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Tuple_type_spec (
                  trans_tuple_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_initializer ((kind, body) : mt) : CST.field_initializer =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Scoped_id (
                  trans_scoped_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_specifier ((kind, body) : mt) : CST.field_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst (
                  trans_type_constant (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Shape_type_spec (
                  trans_shape_type_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type_spec (
                  trans_function_type_specifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Tuple_type_spec (
                  trans_tuple_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_finally_clause ((kind, body) : mt) : CST.finally_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_compound_statement (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_statement ((kind, body) : mt) : CST.for_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_expression (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_expression (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_expression (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v6
            ,
            Run.trans_token (Run.matcher_token v7),
            (match v8 with
            | Alt (0, v) ->
                `Choice_func_decl (
                  (match v with
                  | Alt (0, v) ->
                      `Func_decl (
                        trans_function_declaration (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Class_decl (
                        trans_class_declaration (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Inte_decl (
                        trans_interface_declaration (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Trait_decl (
                        trans_trait_declaration (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Alias_decl (
                        trans_alias_declaration (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Enum_decl (
                        trans_enum_declaration (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Name_decl (
                        trans_namespace_declaration (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Const_decl (
                        trans_const_declaration (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Throw_stmt (
                  trans_throw_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Echo_stmt (
                  trans_echo_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Unset_stmt (
                  trans_unset_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Use_stmt (
                  trans_use_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Fore_stmt (
                  trans_foreach_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Conc_stmt (
                  trans_concurrent_statement (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Using_stmt (
                  trans_using_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_foreach_statement ((kind, body) : mt) : CST.foreach_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_await_modifier (Run.matcher_token v))
              v3
            ,
            trans_tok_pdyn_p1_as (Run.matcher_token v4),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Var (
                            trans_variable (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Pipe_var (
                            trans_pipe_variable (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `List_exp (
                            trans_list_expression (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Subs_exp (
                            trans_subscript_expression (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Qual_id (
                            trans_qualified_identifier (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Paren_exp (
                            trans_parenthesized_expression (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Call_exp (
                            trans_call_expression (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Scoped_id (
                            trans_scoped_identifier (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Scope_id (
                            trans_scope_identifier (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Sele_exp (
                            trans_selection_expression (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Choice_xhp_id (
                            (match v with
                            | Alt (0, v) ->
                                `Xhp_id (
                                  trans_xhp_identifier (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Xhp_class_id (
                                  trans_xhp_class_identifier (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            (match v6 with
            | Alt (0, v) ->
                `Var (
                  trans_variable (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pipe_var (
                  trans_pipe_variable (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `List_exp (
                  trans_list_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Subs_exp (
                  trans_subscript_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Qual_id (
                  trans_qualified_identifier (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Paren_exp (
                  trans_parenthesized_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Scoped_id (
                  trans_scoped_identifier (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Scope_id (
                  trans_scope_identifier (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Sele_exp (
                  trans_selection_expression (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Choice_xhp_id (
                  (match v with
                  | Alt (0, v) ->
                      `Xhp_id (
                        trans_xhp_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Xhp_class_id (
                        trans_xhp_class_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v7),
            (match v8 with
            | Alt (0, v) ->
                `Choice_func_decl (
                  (match v with
                  | Alt (0, v) ->
                      `Func_decl (
                        trans_function_declaration (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Class_decl (
                        trans_class_declaration (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Inte_decl (
                        trans_interface_declaration (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Trait_decl (
                        trans_trait_declaration (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Alias_decl (
                        trans_alias_declaration (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Enum_decl (
                        trans_enum_declaration (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Name_decl (
                        trans_namespace_declaration (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Const_decl (
                        trans_const_declaration (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Throw_stmt (
                  trans_throw_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Echo_stmt (
                  trans_echo_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Unset_stmt (
                  trans_unset_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Use_stmt (
                  trans_use_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Fore_stmt (
                  trans_foreach_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Conc_stmt (
                  trans_concurrent_statement (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Using_stmt (
                  trans_using_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_declaration ((kind, body) : mt) : CST.function_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_attribute_modifier (Run.matcher_token v))
              v0
            ,
            trans_function_declaration_header (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_declaration_header ((kind, body) : mt) : CST.function_declaration_header =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v -> trans_async_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_semgrep_extended_identifier (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v3
            ,
            trans_parameters (Run.matcher_token v4),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      Run.opt
                        (fun v -> trans_attribute_modifier (Run.matcher_token v))
                        v1
                      ,
                      (match v2 with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            Run.opt
              (fun v -> trans_where_clause (Run.matcher_token v))
              v6
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_type_specifier ((kind, body) : mt) : CST.function_type_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.repeat
              (fun v -> trans_type_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_pat_466b599 (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3; v4] ->
                    (
                      Run.opt
                        (fun v -> trans_inout_modifier (Run.matcher_token v))
                        v0
                      ,
                      (match v1 with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v -> trans_variadic_modifier (Run.matcher_token v))
                        v2
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1; v2; v3] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.opt
                                  (fun v -> trans_inout_modifier (Run.matcher_token v))
                                  v1
                                ,
                                (match v2 with
                                | Alt (0, v) ->
                                    `Type_spec (
                                      trans_type_specifier (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Type_cst (
                                      trans_type_constant (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `Shape_type_spec (
                                      trans_shape_type_specifier (Run.matcher_token v)
                                    )
                                | Alt (3, v) ->
                                    `Func_type_spec (
                                      trans_function_type_specifier (Run.matcher_token v)
                                    )
                                | Alt (4, v) ->
                                    `Tuple_type_spec (
                                      trans_tuple_type_specifier (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                                ,
                                Run.opt
                                  (fun v -> trans_variadic_modifier (Run.matcher_token v))
                                  v3
                              )
                          | _ -> assert false
                          )
                        )
                        v3
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v4
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5),
            (match v6 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst (
                  trans_type_constant (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Shape_type_spec (
                  trans_shape_type_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type_spec (
                  trans_function_type_specifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Tuple_type_spec (
                  trans_tuple_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v7)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_heredoc ((kind, body) : mt) : CST.heredoc =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_heredoc_start (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_heredoc_start_newline (Run.matcher_token v))
              v2
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Here_body (
                      trans_heredoc_body (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Var (
                      trans_variable (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Embe_brace_exp (
                      trans_embedded_brace_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> trans_heredoc_end_newline (Run.matcher_token v))
              v4
            ,
            trans_heredoc_end (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_statement ((kind, body) : mt) : CST.if_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Choice_func_decl (
                  (match v with
                  | Alt (0, v) ->
                      `Func_decl (
                        trans_function_declaration (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Class_decl (
                        trans_class_declaration (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Inte_decl (
                        trans_interface_declaration (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Trait_decl (
                        trans_trait_declaration (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Alias_decl (
                        trans_alias_declaration (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Enum_decl (
                        trans_enum_declaration (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Name_decl (
                        trans_namespace_declaration (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Const_decl (
                        trans_const_declaration (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Throw_stmt (
                  trans_throw_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Echo_stmt (
                  trans_echo_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Unset_stmt (
                  trans_unset_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Use_stmt (
                  trans_use_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Fore_stmt (
                  trans_foreach_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Conc_stmt (
                  trans_concurrent_statement (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Using_stmt (
                  trans_using_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Elseif (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Else_if (
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  Run.trans_token (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                      ,
                      trans_parenthesized_expression (Run.matcher_token v1),
                      (match v2 with
                      | Alt (0, v) ->
                          `Choice_func_decl (
                            (match v with
                            | Alt (0, v) ->
                                `Func_decl (
                                  trans_function_declaration (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Class_decl (
                                  trans_class_declaration (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Inte_decl (
                                  trans_interface_declaration (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `Trait_decl (
                                  trans_trait_declaration (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Alias_decl (
                                  trans_alias_declaration (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Enum_decl (
                                  trans_enum_declaration (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `Name_decl (
                                  trans_namespace_declaration (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `Const_decl (
                                  trans_const_declaration (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Comp_stmt (
                            trans_compound_statement (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Empty_stmt (
                            trans_empty_statement (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Exp_stmt (
                            trans_expression_statement (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Ret_stmt (
                            trans_return_statement (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Brk_stmt (
                            trans_break_statement (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Cont_stmt (
                            trans_continue_statement (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Throw_stmt (
                            trans_throw_statement (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Echo_stmt (
                            trans_echo_statement (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Unset_stmt (
                            trans_unset_statement (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Use_stmt (
                            trans_use_statement (Run.matcher_token v)
                          )
                      | Alt (11, v) ->
                          `If_stmt (
                            trans_if_statement (Run.matcher_token v)
                          )
                      | Alt (12, v) ->
                          `While_stmt (
                            trans_while_statement (Run.matcher_token v)
                          )
                      | Alt (13, v) ->
                          `Do_stmt (
                            trans_do_statement (Run.matcher_token v)
                          )
                      | Alt (14, v) ->
                          `For_stmt (
                            trans_for_statement (Run.matcher_token v)
                          )
                      | Alt (15, v) ->
                          `Switch_stmt (
                            trans_switch_statement (Run.matcher_token v)
                          )
                      | Alt (16, v) ->
                          `Fore_stmt (
                            trans_foreach_statement (Run.matcher_token v)
                          )
                      | Alt (17, v) ->
                          `Try_stmt (
                            trans_try_statement (Run.matcher_token v)
                          )
                      | Alt (18, v) ->
                          `Conc_stmt (
                            trans_concurrent_statement (Run.matcher_token v)
                          )
                      | Alt (19, v) ->
                          `Using_stmt (
                            trans_using_statement (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Choice_func_decl (
                            (match v with
                            | Alt (0, v) ->
                                `Func_decl (
                                  trans_function_declaration (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Class_decl (
                                  trans_class_declaration (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Inte_decl (
                                  trans_interface_declaration (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `Trait_decl (
                                  trans_trait_declaration (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Alias_decl (
                                  trans_alias_declaration (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Enum_decl (
                                  trans_enum_declaration (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `Name_decl (
                                  trans_namespace_declaration (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `Const_decl (
                                  trans_const_declaration (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Comp_stmt (
                            trans_compound_statement (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Empty_stmt (
                            trans_empty_statement (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Exp_stmt (
                            trans_expression_statement (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Ret_stmt (
                            trans_return_statement (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Brk_stmt (
                            trans_break_statement (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Cont_stmt (
                            trans_continue_statement (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Throw_stmt (
                            trans_throw_statement (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Echo_stmt (
                            trans_echo_statement (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Unset_stmt (
                            trans_unset_statement (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Use_stmt (
                            trans_use_statement (Run.matcher_token v)
                          )
                      | Alt (11, v) ->
                          `If_stmt (
                            trans_if_statement (Run.matcher_token v)
                          )
                      | Alt (12, v) ->
                          `While_stmt (
                            trans_while_statement (Run.matcher_token v)
                          )
                      | Alt (13, v) ->
                          `Do_stmt (
                            trans_do_statement (Run.matcher_token v)
                          )
                      | Alt (14, v) ->
                          `For_stmt (
                            trans_for_statement (Run.matcher_token v)
                          )
                      | Alt (15, v) ->
                          `Switch_stmt (
                            trans_switch_statement (Run.matcher_token v)
                          )
                      | Alt (16, v) ->
                          `Fore_stmt (
                            trans_foreach_statement (Run.matcher_token v)
                          )
                      | Alt (17, v) ->
                          `Try_stmt (
                            trans_try_statement (Run.matcher_token v)
                          )
                      | Alt (18, v) ->
                          `Conc_stmt (
                            trans_concurrent_statement (Run.matcher_token v)
                          )
                      | Alt (19, v) ->
                          `Using_stmt (
                            trans_using_statement (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_implements_clause ((kind, body) : mt) : CST.implements_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst (
                  trans_type_constant (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Shape_type_spec (
                  trans_shape_type_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type_spec (
                  trans_function_type_specifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Tuple_type_spec (
                  trans_tuple_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_include_expression ((kind, body) : mt) : CST.include_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Incl (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Incl_once (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_interface_declaration ((kind, body) : mt) : CST.interface_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v -> trans_attribute_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_semgrep_extended_identifier (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> trans_extends_clause (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v -> trans_where_clause (Run.matcher_token v))
              v5
            ,
            trans_member_declarations (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_is_expression ((kind, body) : mt) : CST.is_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst (
                  trans_type_constant (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Shape_type_spec (
                  trans_shape_type_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type_spec (
                  trans_function_type_specifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Tuple_type_spec (
                  trans_tuple_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lambda_expression ((kind, body) : mt) : CST.lambda_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_attribute_modifier (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_async_modifier (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Single_param_params (
                  trans_single_parameter_parameters (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Params_opt_COLON_choice_type_spec (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_parameters (Run.matcher_token v0),
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  (match v1 with
                                  | Alt (0, v) ->
                                      `Type_spec (
                                        trans_type_specifier (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Type_cst (
                                        trans_type_constant (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Shape_type_spec (
                                        trans_shape_type_specifier (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Func_type_spec (
                                        trans_function_type_specifier (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Tuple_type_spec (
                                        trans_tuple_type_specifier (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_list_expression ((kind, body) : mt) : CST.list_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v2
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      Run.opt
                        (fun v -> trans_expression (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_member_declarations ((kind, body) : mt) : CST.member_declarations =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Class_const_decl (
                      trans_class_const_declaration (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Meth_decl (
                      trans_method_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Prop_decl (
                      trans_property_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Type_const_decl (
                      trans_type_const_declaration (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Trait_use_clause (
                      trans_trait_use_clause (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Requ_imples_clause (
                      trans_require_implements_clause (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Requ_extends_clause (
                      trans_require_extends_clause (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Xhp_attr_decl (
                      trans_xhp_attribute_declaration (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Xhp_chil_decl (
                      trans_xhp_children_declaration (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Xhp_cate_decl (
                      trans_xhp_category_declaration (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Ellips (
                      trans_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_declaration ((kind, body) : mt) : CST.method_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_attribute_modifier (Run.matcher_token v))
              v0
            ,
            Run.repeat
              (fun v -> trans_member_modifier (Run.matcher_token v))
              v1
            ,
            trans_function_declaration_header (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_namespace_declaration ((kind, body) : mt) : CST.namespace_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Qual_id_SEMI (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_qualified_identifier (Run.matcher_token v0),
                            Run.trans_token (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Opt_qual_id_comp_stmt (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.opt
                              (fun v -> trans_qualified_identifier (Run.matcher_token v))
                              v0
                            ,
                            trans_compound_statement (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_new_expression ((kind, body) : mt) : CST.new_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Var (
                  trans_variable (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pipe_var (
                  trans_pipe_variable (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `List_exp (
                  trans_list_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Subs_exp (
                  trans_subscript_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Qual_id (
                  trans_qualified_identifier (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Paren_exp (
                  trans_parenthesized_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Scoped_id (
                  trans_scoped_identifier (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Scope_id (
                  trans_scope_identifier (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Sele_exp (
                  trans_selection_expression (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Choice_xhp_id (
                  (match v with
                  | Alt (0, v) ->
                      `Xhp_id (
                        trans_xhp_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Xhp_class_id (
                        trans_xhp_class_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_arguments (Run.matcher_token v))
              v2
            ,
            trans_arguments (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameter ((kind, body) : mt) : CST.parameter =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Opt_attr_modi_opt_visi_modi_opt_inout_modi_opt_choice_type_spec_opt_vari_modi_var_opt_EQ_exp (
            (match v with
            | Seq [v0; v1; v2; v3; v4; v5; v6] ->
                (
                  Run.opt
                    (fun v -> trans_attribute_modifier (Run.matcher_token v))
                    v0
                  ,
                  Run.opt
                    (fun v -> trans_visibility_modifier (Run.matcher_token v))
                    v1
                  ,
                  Run.opt
                    (fun v -> trans_inout_modifier (Run.matcher_token v))
                    v2
                  ,
                  Run.opt
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v3
                  ,
                  Run.opt
                    (fun v -> trans_variadic_modifier (Run.matcher_token v))
                    v4
                  ,
                  trans_variable (Run.matcher_token v5),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_expression (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v6
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Ellips (
            trans_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameters ((kind, body) : mt) : CST.parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Vari_modi (
                      trans_variadic_modifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Param_rep_COMMA_param_opt_COMMA (
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            trans_parameter (Run.matcher_token v0),
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      trans_parameter (Run.matcher_token v1)
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                            ,
                            Run.opt
                              (fun v -> Run.trans_token (Run.matcher_token v))
                              v2
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_expression ((kind, body) : mt) : CST.parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_postfix_unary_expression ((kind, body) : mt) : CST.postfix_unary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `PLUSPLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASHDASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_prefix_unary_expression ((kind, body) : mt) : CST.prefix_unary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `BANG_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `TILDE_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `DASH_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `PLUS_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `PLUSPLUS_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `DASHDASH_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Print_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Clone_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Await_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (9, v) ->
          `AT_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_property_declaration ((kind, body) : mt) : CST.property_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> trans_attribute_modifier (Run.matcher_token v))
              v0
            ,
            Run.repeat
              (fun v -> trans_member_modifier (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Type_spec (
                      trans_type_specifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Type_cst (
                      trans_type_constant (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Shape_type_spec (
                      trans_shape_type_specifier (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Func_type_spec (
                      trans_function_type_specifier (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Tuple_type_spec (
                      trans_tuple_type_specifier (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_property_declarator (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_property_declarator (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_property_declarator ((kind, body) : mt) : CST.property_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_variable (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_require_expression ((kind, body) : mt) : CST.require_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Requ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Requ_once (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_require_extends_clause ((kind, body) : mt) : CST.require_extends_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst (
                  trans_type_constant (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Shape_type_spec (
                  trans_shape_type_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type_spec (
                  trans_function_type_specifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Tuple_type_spec (
                  trans_tuple_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_require_implements_clause ((kind, body) : mt) : CST.require_implements_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst (
                  trans_type_constant (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Shape_type_spec (
                  trans_shape_type_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type_spec (
                  trans_function_type_specifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Tuple_type_spec (
                  trans_tuple_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_return_statement ((kind, body) : mt) : CST.return_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_selection_expression ((kind, body) : mt) : CST.selection_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Choice_var (
                  (match v with
                  | Alt (0, v) ->
                      `Var (
                        trans_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Pipe_var (
                        trans_pipe_variable (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `List_exp (
                        trans_list_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Subs_exp (
                        trans_subscript_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Qual_id (
                        trans_qualified_identifier (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Paren_exp (
                        trans_parenthesized_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Scoped_id (
                        trans_scoped_identifier (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Scope_id (
                        trans_scope_identifier (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Sele_exp (
                        trans_selection_expression (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Choice_xhp_id (
                        (match v with
                        | Alt (0, v) ->
                            `Xhp_id (
                              trans_xhp_identifier (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Xhp_class_id (
                              trans_xhp_class_identifier (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `As_exp (
                  trans_as_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `QMARKDASHGT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASHGT (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Choice_var (
                  (match v with
                  | Alt (0, v) ->
                      `Var (
                        trans_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Pipe_var (
                        trans_pipe_variable (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `List_exp (
                        trans_list_expression (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Subs_exp (
                        trans_subscript_expression (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Qual_id (
                        trans_qualified_identifier (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Paren_exp (
                        trans_parenthesized_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Call_exp (
                        trans_call_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Scoped_id (
                        trans_scoped_identifier (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Scope_id (
                        trans_scope_identifier (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Sele_exp (
                        trans_selection_expression (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Choice_xhp_id (
                        (match v with
                        | Alt (0, v) ->
                            `Xhp_id (
                              trans_xhp_identifier (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Xhp_class_id (
                              trans_xhp_class_identifier (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Braced_exp (
                  trans_braced_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Choice_type (
                  (match v with
                  | Alt (0, v) ->
                      `Type (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Newt (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Shape (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Tupe (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Clone (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `New (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Print (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Choice_bool (
                        (match v with
                        | Alt (0, v) ->
                            `Bool (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Float (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Int (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Str (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Arra (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Void (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `Nonn (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `Null (
                              trans_null (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `Mixed (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `Dyna (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Nore (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (8, v) ->
                      `Choice_array (
                        (match v with
                        | Alt (0, v) ->
                            `Array (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Varray (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Darray (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Vec (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Dict (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Keyset (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_shape ((kind, body) : mt) : CST.shape =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_field_initializer (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_field_initializer (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_shape_type_specifier ((kind, body) : mt) : CST.shape_type_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.repeat
              (fun v -> trans_type_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Field_spec (
                            trans_field_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `DOTDOTDOT (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Field_spec (
                                      trans_field_specifier (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `DOTDOTDOT (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subscript_expression ((kind, body) : mt) : CST.subscript_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_case ((kind, body) : mt) : CST.switch_case =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_func_decl (
                      (match v with
                      | Alt (0, v) ->
                          `Func_decl (
                            trans_function_declaration (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Class_decl (
                            trans_class_declaration (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Inte_decl (
                            trans_interface_declaration (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Trait_decl (
                            trans_trait_declaration (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Alias_decl (
                            trans_alias_declaration (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Enum_decl (
                            trans_enum_declaration (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Name_decl (
                            trans_namespace_declaration (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Const_decl (
                            trans_const_declaration (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Comp_stmt (
                      trans_compound_statement (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Exp_stmt (
                      trans_expression_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Ret_stmt (
                      trans_return_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Cont_stmt (
                      trans_continue_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Throw_stmt (
                      trans_throw_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Echo_stmt (
                      trans_echo_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Unset_stmt (
                      trans_unset_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Use_stmt (
                      trans_use_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Switch_stmt (
                      trans_switch_statement (Run.matcher_token v)
                    )
                | Alt (16, v) ->
                    `Fore_stmt (
                      trans_foreach_statement (Run.matcher_token v)
                    )
                | Alt (17, v) ->
                    `Try_stmt (
                      trans_try_statement (Run.matcher_token v)
                    )
                | Alt (18, v) ->
                    `Conc_stmt (
                      trans_concurrent_statement (Run.matcher_token v)
                    )
                | Alt (19, v) ->
                    `Using_stmt (
                      trans_using_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_default ((kind, body) : mt) : CST.switch_default =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_func_decl (
                      (match v with
                      | Alt (0, v) ->
                          `Func_decl (
                            trans_function_declaration (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Class_decl (
                            trans_class_declaration (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Inte_decl (
                            trans_interface_declaration (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Trait_decl (
                            trans_trait_declaration (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Alias_decl (
                            trans_alias_declaration (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Enum_decl (
                            trans_enum_declaration (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Name_decl (
                            trans_namespace_declaration (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Const_decl (
                            trans_const_declaration (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Comp_stmt (
                      trans_compound_statement (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Exp_stmt (
                      trans_expression_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Ret_stmt (
                      trans_return_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Cont_stmt (
                      trans_continue_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Throw_stmt (
                      trans_throw_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Echo_stmt (
                      trans_echo_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Unset_stmt (
                      trans_unset_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Use_stmt (
                      trans_use_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Switch_stmt (
                      trans_switch_statement (Run.matcher_token v)
                    )
                | Alt (16, v) ->
                    `Fore_stmt (
                      trans_foreach_statement (Run.matcher_token v)
                    )
                | Alt (17, v) ->
                    `Try_stmt (
                      trans_try_statement (Run.matcher_token v)
                    )
                | Alt (18, v) ->
                    `Conc_stmt (
                      trans_concurrent_statement (Run.matcher_token v)
                    )
                | Alt (19, v) ->
                    `Using_stmt (
                      trans_using_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_statement ((kind, body) : mt) : CST.switch_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Switch_case (
                      trans_switch_case (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Switch_defa (
                      trans_switch_default (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ternary_expression ((kind, body) : mt) : CST.ternary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_expression (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_throw_statement ((kind, body) : mt) : CST.throw_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_trait_declaration ((kind, body) : mt) : CST.trait_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v -> trans_attribute_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_semgrep_extended_identifier (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> trans_implements_clause (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v -> trans_where_clause (Run.matcher_token v))
              v5
            ,
            trans_member_declarations (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_trait_use_clause ((kind, body) : mt) : CST.trait_use_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst (
                  trans_type_constant (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Shape_type_spec (
                  trans_shape_type_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type_spec (
                  trans_function_type_specifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Tuple_type_spec (
                  trans_tuple_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `LCURL_rep_choice_trait_select_clause_SEMI_RCURL (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  (match v0 with
                                  | Alt (0, v) ->
                                      `Trait_select_clause (
                                        trans_trait_select_clause (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Trait_alias_clause (
                                        trans_trait_alias_clause (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                  ,
                                  Run.trans_token (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_try_statement ((kind, body) : mt) : CST.try_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_compound_statement (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_catch_clause (Run.matcher_token v))
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Catch_clause (
                  trans_catch_clause (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Fina_clause (
                  trans_finally_clause (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple ((kind, body) : mt) : CST.tuple =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_expression (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_type_specifier ((kind, body) : mt) : CST.tuple_type_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.repeat
              (fun v -> trans_type_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst (
                  trans_type_constant (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Shape_type_spec (
                  trans_shape_type_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type_spec (
                  trans_function_type_specifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Tuple_type_spec (
                  trans_tuple_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_arguments ((kind, body) : mt) : CST.type_arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Type_spec (
                                      trans_type_specifier (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Type_cst (
                                      trans_type_constant (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `Shape_type_spec (
                                      trans_shape_type_specifier (Run.matcher_token v)
                                    )
                                | Alt (3, v) ->
                                    `Func_type_spec (
                                      trans_function_type_specifier (Run.matcher_token v)
                                    )
                                | Alt (4, v) ->
                                    `Tuple_type_spec (
                                      trans_tuple_type_specifier (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_const_declaration ((kind, body) : mt) : CST.type_const_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            Run.opt
              (fun v -> trans_attribute_modifier (Run.matcher_token v))
              v0
            ,
            Run.repeat
              (fun v -> trans_member_modifier (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_semgrep_extended_identifier (Run.matcher_token v4),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v5
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v6
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v7
            ,
            Run.trans_token (Run.matcher_token v8)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameter ((kind, body) : mt) : CST.type_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_attribute_modifier (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `PLUS (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `DASH (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Reify (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_identifier (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `As (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Super (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      (match v1 with
                      | Alt (0, v) ->
                          `Type_spec (
                            trans_type_specifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_cst (
                            trans_type_constant (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Shape_type_spec (
                            trans_shape_type_specifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func_type_spec (
                            trans_function_type_specifier (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Tuple_type_spec (
                            trans_tuple_type_specifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameters ((kind, body) : mt) : CST.type_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_parameter (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_parameter (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_specifier ((kind, body) : mt) : CST.type_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.repeat
              (fun v -> trans_type_modifier (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Choice_bool (
                  (match v with
                  | Alt (0, v) ->
                      `Bool (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Float (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Int (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Arra (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Void (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Nonn (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Null (
                        trans_null (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Mixed (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Dyna (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Nore (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Qual_id (
                  trans_qualified_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Choice_array (
                  (match v with
                  | Alt (0, v) ->
                      `Array (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Varray (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Darray (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Vec (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Dict (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Keyset (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (3, v) ->
                `Choice_xhp_id (
                  (match v with
                  | Alt (0, v) ->
                      `Xhp_id (
                        trans_xhp_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Xhp_class_id (
                        trans_xhp_class_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_arguments (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unset_statement ((kind, body) : mt) : CST.unset_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Var (
                            trans_variable (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Pipe_var (
                            trans_pipe_variable (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `List_exp (
                            trans_list_expression (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Subs_exp (
                            trans_subscript_expression (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Qual_id (
                            trans_qualified_identifier (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Paren_exp (
                            trans_parenthesized_expression (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Call_exp (
                            trans_call_expression (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Scoped_id (
                            trans_scoped_identifier (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Scope_id (
                            trans_scope_identifier (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Sele_exp (
                            trans_selection_expression (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Choice_xhp_id (
                            (match v with
                            | Alt (0, v) ->
                                `Xhp_id (
                                  trans_xhp_identifier (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Xhp_class_id (
                                  trans_xhp_class_identifier (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Var (
                                      trans_variable (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Pipe_var (
                                      trans_pipe_variable (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `List_exp (
                                      trans_list_expression (Run.matcher_token v)
                                    )
                                | Alt (3, v) ->
                                    `Subs_exp (
                                      trans_subscript_expression (Run.matcher_token v)
                                    )
                                | Alt (4, v) ->
                                    `Qual_id (
                                      trans_qualified_identifier (Run.matcher_token v)
                                    )
                                | Alt (5, v) ->
                                    `Paren_exp (
                                      trans_parenthesized_expression (Run.matcher_token v)
                                    )
                                | Alt (6, v) ->
                                    `Call_exp (
                                      trans_call_expression (Run.matcher_token v)
                                    )
                                | Alt (7, v) ->
                                    `Scoped_id (
                                      trans_scoped_identifier (Run.matcher_token v)
                                    )
                                | Alt (8, v) ->
                                    `Scope_id (
                                      trans_scope_identifier (Run.matcher_token v)
                                    )
                                | Alt (9, v) ->
                                    `Sele_exp (
                                      trans_selection_expression (Run.matcher_token v)
                                    )
                                | Alt (10, v) ->
                                    `Choice_xhp_id (
                                      (match v with
                                      | Alt (0, v) ->
                                          `Xhp_id (
                                            trans_xhp_identifier (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `Xhp_class_id (
                                            trans_xhp_class_identifier (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_using_statement ((kind, body) : mt) : CST.using_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_await_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `LPAR_exp_rep_COMMA_exp_RPAR_choice_comp_stmt (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_expression (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                        ,
                        Run.trans_token (Run.matcher_token v3),
                        (match v4 with
                        | Alt (0, v) ->
                            `Comp_stmt (
                              trans_compound_statement (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `SEMI (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_where_clause ((kind, body) : mt) : CST.where_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat1
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_where_constraint (Run.matcher_token v0),
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_where_constraint ((kind, body) : mt) : CST.where_constraint =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst (
                  trans_type_constant (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Shape_type_spec (
                  trans_shape_type_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type_spec (
                  trans_function_type_specifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Tuple_type_spec (
                  trans_tuple_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `As (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Super (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_specifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_cst (
                  trans_type_constant (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Shape_type_spec (
                  trans_shape_type_specifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type_spec (
                  trans_function_type_specifier (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Tuple_type_spec (
                  trans_tuple_type_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_while_statement ((kind, body) : mt) : CST.while_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Choice_func_decl (
                  (match v with
                  | Alt (0, v) ->
                      `Func_decl (
                        trans_function_declaration (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Class_decl (
                        trans_class_declaration (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Inte_decl (
                        trans_interface_declaration (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Trait_decl (
                        trans_trait_declaration (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Alias_decl (
                        trans_alias_declaration (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Enum_decl (
                        trans_enum_declaration (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Name_decl (
                        trans_namespace_declaration (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Const_decl (
                        trans_const_declaration (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Comp_stmt (
                  trans_compound_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Throw_stmt (
                  trans_throw_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Echo_stmt (
                  trans_echo_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Unset_stmt (
                  trans_unset_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Use_stmt (
                  trans_use_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Fore_stmt (
                  trans_foreach_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Conc_stmt (
                  trans_concurrent_statement (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Using_stmt (
                  trans_using_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_xhp_attribute ((kind, body) : mt) : CST.xhp_attribute =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Xhp_id_EQ_choice_str (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_xhp_identifier (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Braced_exp (
                        trans_braced_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_braced_exp (
            (match v with
            | Alt (0, v) ->
                `Braced_exp (
                  trans_braced_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Xhp_spread_exp (
                  trans_xhp_spread_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_xhp_attribute_declaration ((kind, body) : mt) : CST.xhp_attribute_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_xhp_class_attribute (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_xhp_class_attribute (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_xhp_class_attribute ((kind, body) : mt) : CST.xhp_class_attribute =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Choice_type_spec (
                  (match v with
                  | Alt (0, v) ->
                      `Type_spec (
                        trans_type_specifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Type_cst (
                        trans_type_constant (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Shape_type_spec (
                        trans_shape_type_specifier (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Func_type_spec (
                        trans_function_type_specifier (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Tuple_type_spec (
                        trans_tuple_type_specifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Xhp_enum_type (
                  trans_xhp_enum_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_xhp_identifier (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `ATre (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `ATla (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_xhp_expression ((kind, body) : mt) : CST.xhp_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Xhp_open_close (
            trans_xhp_open_close (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Xhp_open_rep_choice_xhp_str_xhp_close (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_xhp_open (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Xhp_str (
                            trans_xhp_string (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Xhp_comm (
                            trans_xhp_comment (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Braced_exp (
                            trans_braced_expression (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Xhp_exp (
                            trans_xhp_expression (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  trans_xhp_close (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_xhp_open ((kind, body) : mt) : CST.xhp_open =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Xhp_id (
                  trans_xhp_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Xhp_class_id (
                  trans_xhp_class_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v -> trans_xhp_attribute (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_xhp_open_close ((kind, body) : mt) : CST.xhp_open_close =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Xhp_id (
                  trans_xhp_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Xhp_class_id (
                  trans_xhp_class_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v -> trans_xhp_attribute (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_xhp_spread_expression ((kind, body) : mt) : CST.xhp_spread_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_yield_expression ((kind, body) : mt) : CST.yield_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Elem_init (
                  trans_element_initializer (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_script ((kind, body) : mt) : CST.script =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_pat_b6fe07e (Run.matcher_token v))
              v0
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_func_decl (
                      (match v with
                      | Alt (0, v) ->
                          `Func_decl (
                            trans_function_declaration (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Class_decl (
                            trans_class_declaration (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Inte_decl (
                            trans_interface_declaration (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Trait_decl (
                            trans_trait_declaration (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Alias_decl (
                            trans_alias_declaration (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Enum_decl (
                            trans_enum_declaration (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Name_decl (
                            trans_namespace_declaration (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Const_decl (
                            trans_const_declaration (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Comp_stmt (
                      trans_compound_statement (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Exp_stmt (
                      trans_expression_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Ret_stmt (
                      trans_return_statement (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Cont_stmt (
                      trans_continue_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Throw_stmt (
                      trans_throw_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `Echo_stmt (
                      trans_echo_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `Unset_stmt (
                      trans_unset_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `Use_stmt (
                      trans_use_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Switch_stmt (
                      trans_switch_statement (Run.matcher_token v)
                    )
                | Alt (16, v) ->
                    `Fore_stmt (
                      trans_foreach_statement (Run.matcher_token v)
                    )
                | Alt (17, v) ->
                    `Try_stmt (
                      trans_try_statement (Run.matcher_token v)
                    )
                | Alt (18, v) ->
                    `Conc_stmt (
                      trans_concurrent_statement (Run.matcher_token v)
                    )
                | Alt (19, v) ->
                    `Using_stmt (
                      trans_using_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false





(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "comment" ->
      (match translate_tree src node trans_comment with
      | None -> None
      | Some x -> Some (`Comment (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_script

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

